================================================================================
[01] カーネルバージョンの調査
[02] カーネルイメージの調査
[03] カーネルモジュールの調査
[04] ビルド練習
[05] カーネルモジュールの作成 - 1 (カーネル 3.10.0)
[06] カーネルモジュールの作成 - 2 (カーネル 3.10.0)
================================================================================
[01]
  カーネルバージョンの調査
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 調査方法1
    コマンド(uname)から調査
  
  ## 調査方法2
    仮想ファイル(/proc/version)から調査
  
  ## 調査方法3
    カーネルソースのファイル(Makefile)から調査
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.0-1160.el7.x86_64 -> 3(メジャー番号)、10(マイナー番号)、0(リリース番号)、-1160.el7.x86_64(エクストラ番号)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/version
  
  コマンドの実行結果
  --------------------------------------------------
  Linux version 3.10.0-1160.el7.x86_64 (省略) -> コマンド(uname)と同一
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo find /usr/src -name $(uname -r)
  
  コマンドの実行結果
  --------------------------------------------------
  /usr/src/kernels/3.10.0-1160.el7.x86_64 -> パス(/usr/src)からファイル名(カーネルバージョン)を検索
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/3.10.0-1160.el7.x86_64
  vm12$ head -n 4 Makefile
  
  コマンドの実行結果
  --------------------------------------------------
  VERSION = 3
  PATCHLEVEL = 10
  SUBLEVEL = 0
  EXTRAVERSION = -1160.45.1.el7.x86_64
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[02]
  カーネルイメージの調査
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 調査方法
    パス(/boot)から調査
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.0-1160.el7.x86_64 -> 3(メジャー番号)、10(マイナー番号)、0(リリース番号)、-1160.el7.x86_64(エクストラ番号)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo find /boot -name vmlinuz-$(uname -r)
  
  コマンドの実行結果
  --------------------------------------------------
  /boot/vmlinuz-3.10.0-1160.el7.x86_64 -> カーネルイメージファイルを確認
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[03]
  カーネルモジュールの調査
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 調査方法
    パス(/lib/modules)から調査 -> サンプルとしてファイルシステム(xfs)のカーネルモジュールの調査
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.0-1160.el7.x86_64 -> 3(メジャー番号)、10(マイナー番号)、0(リリース番号)、-1160.el7.x86_64(エクストラ番号)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo find /lib/modules -name $(uname -r)
  
  コマンドの実行結果
  --------------------------------------------------
  /lib/modules/3.10.0-1160.el7.x86_64
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  lrwxrwxrwx.  1 root root   39 12月  1 19:31 build -> /usr/src/kernels/3.10.0-1160.el7.x86_64
  drwxr-xr-x.  2 root root    6 10月 20  2020 extra
  drwxr-xr-x. 12 root root  128 12月  1 19:31 kernel               // カーネルモジュール格納場所
  -rw-r--r--.  1 root root 841K 12月  1 19:40 modules.alias        // カーネルモジュール別名
  -rw-r--r--.  1 root root 801K 12月  1 19:40 modules.alias.bin    // 不明
  -rw-r--r--.  1 root root 1.4K 10月 20  2020 modules.block        // 不明
  -rw-r--r--.  1 root root 7.3K 10月 20  2020 modules.builtin      // 不明
  -rw-r--r--.  1 root root 9.3K 12月  1 19:40 modules.builtin.bin  // 不明
  -rw-r--r--.  1 root root 267K 12月  1 19:40 modules.dep          // カーネルモジュール依存関係 -> 後の方でも参照するので留意
  -rw-r--r--.  1 root root 374K 12月  1 19:40 modules.dep.bin
  -rw-r--r--.  1 root root  361 12月  1 19:40 modules.devname
  -rw-r--r--.  1 root root  140 10月 20  2020 modules.drm
  -rw-r--r--.  1 root root   69 10月 20  2020 modules.modesetting
  -rw-r--r--.  1 root root 1.8K 10月 20  2020 modules.networking
  -rw-r--r--.  1 root root  96K 10月 20  2020 modules.order
  -rw-r--r--.  1 root root  569 12月  1 19:40 modules.softdep
  -rw-r--r--.  1 root root 389K 12月  1 19:40 modules.symbols
  -rw-r--r--.  1 root root 475K 12月  1 19:40 modules.symbols.bin
  lrwxrwxrwx.  1 root root    5 12月  1 19:31 source -> build
  drwxr-xr-x.  2 root root    6 10月 20  2020 updates
  drwxr-xr-x.  2 root root   95 12月  1 19:31 vdso
  drwxr-xr-x.  2 root root    6 10月 20  2020 weak-updates
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64/kernel
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  drwxr-xr-x.  3 root root   17 12月  1 19:31 arch     // アーキテクチャ
  drwxr-xr-x.  3 root root 4.0K 12月  1 19:31 crypto   // 暗号化
  drwxr-xr-x. 72 root root 4.0K 12月  1 19:31 drivers  // ドライバ
  drwxr-xr-x. 26 root root 4.0K 12月  1 19:31 fs       // ファイルシステム -> ここからファイルシステム(xfs)のカーネルモジュールの調査
  drwxr-xr-x.  3 root root   19 12月  1 19:31 kernel   // カーネル
  drwxr-xr-x.  4 root root  249 12月  1 19:31 lib      // ライブラリ
  drwxr-xr-x.  2 root root   35 12月  1 19:31 mm       // メモリ
  drwxr-xr-x. 34 root root 4.0K 12月  1 19:31 net      // ネットワーク
  drwxr-xr-x. 12 root root  173 12月  1 19:31 sound    // サウンド -> 仮想マシンでは不要
  drwxr-xr-x.  3 root root   17 12月  1 19:31 virt     // 仮想環境 -> 仮想マシンでは不要
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64/kernel
  vm12$ sudo find fs/ -name xfs
  
  コマンドの実行結果
  --------------------------------------------------
  fs/xfs -> 実体はディレクトリ
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64/kernel/fs/xfs
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-r--r--. 1 root root 328K 10月 20  2020 xfs.ko.xz -> カーネルモジュール名はそのままで「xfs」と判明
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ modinfo xfs(判明したモジュール名)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /lib/modules/3.10.0-1160.el7.x86_64/kernel/fs/xfs/xfs.ko.xz  // 実体ファイルのパス
  license:        GPL                                                          // ライセンス
  description:    SGI XFS with ACLs, security attributes, no debug enabled     // 説明
  author:         Silicon Graphics, Inc.                                       // 作者
  alias:          fs-xfs                                                       // 別名
  retpoline:      Y                                                            // 不明
  rhelversion:    7.9                                                          // 不明
  srcversion:     ACB9CF86C248DD09DC2B428                                      // 不明
  depends:        libcrc32c                                                    // 依存関係(xfsはlibcrc32cに依存している)
  intree:         Y
  vermagic:       3.10.0-1160.el7.x86_64 SMP mod_unload modversions 
  signer:         CentOS Linux kernel signing key
  sig_key:        E1:FD:B0:E2:A7:E8:61:A1:D1:CA:80:A2:3D:CF:0D:BA:3A:A4:AD:F5
  sig_hashalgo:   sha256
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lsmod | grep xfs
  
  コマンドの実行結果
  --------------------------------------------------
  xfs       997727  2 -> xfs は他モジュールから参照されていない
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lsmod | grep libcrc32c(xfsが参照しているモジュール名)
  
  コマンドの実行結果
  --------------------------------------------------
  libcrc32c  12644  3  xfs,nf_nat,nf_conntrack -> libcrc32c は xfs を筆頭に、他モジュールから参照されている
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/modules | grep xfs
  
  コマンドの実行結果
  --------------------------------------------------
  xfs 997727 2 - Live 0x0000000000000000 -> xfs は他モジュールから参照されていない
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/modules | grep libcrc32c
  
  コマンドの実行結果
  --------------------------------------------------
  libcrc32c 12644 3 nf_nat,nf_conntrack,xfs, Live 0x0000000000000000 -> libcrc32c は xfs を筆頭に、他モジュールから参照されている
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64
  vm12$ grep xfs modules.dep
  
  コマンドの実行結果
  --------------------------------------------------
  kernel/fs/xfs/xfs.ko.xz: kernel/lib/libcrc32c.ko.xz -> xfsはlibcrc32cに依存している
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64
  vm12$ grep libcrc32c modules.dep
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 様々なモジュールがlibcrc32cに依存しているため出力多数
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[04]
  ビルド練習
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 実行内容
    簡単なプログラム作成後に、Makefileによるビルドを行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo yum -y groupinstall '開発ツール'
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 開発ツール一式をインストール
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir HELLO
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.h (ヘッダファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  // 関数実装
  void Hello1(void) { printf("Hello1\n"); }
  void Hello2(void) { printf("Hello2\n"); }
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi main.c (プログラム本体)
  
  コマンドの実行結果
  --------------------------------------------------
  #include "hello.h"
  
  int main(void)
  {
    Hello1();  // 関数呼出
    Hello2();  // 関数呼出
    return 0;
  }
  --------------------------------------------------
  
  備考
  ==================================================
  ビルド自体は「Makefile」不使用でも「gcc -o HELLO main.c hello.c」で可能。
  しかし今回は「Makefile」使用でビルドを行う。
  ==================================================
  
  vm12$ cd $HOME/HELLO
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  PROG := HELLO
  OBJ1 := main.o
  OBJ2 := hello.o
  SRC1 := main.c
  SRC2 := hello.c
  COMP := gcc
  
  # ビルド -> 単にmakeと実行した場合は一番上のターゲットが実行される
  $(PROG): $(OBJ1) $(OBJ2)
    $(COMP) $(OBJ1) $(OBJ2) -o $(PROG)  // 行頭のインデントはtabキー
  
  # main.o
  $(OBJ1): $(SRC1)
    $(COMP) -c $(SRC1)
  
  # hello.o
  $(OBJ2): $(SRC2)
    $(COMP) -c $(SRC2)
  
  # 削除
  clean:
    rm -f $(PROG) $(OBJ1) $(OBJ2)
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c main.c
  gcc -c hello.c
  gcc main.o hello.o -o HELLO
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n main.o (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c main.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n hello.o (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  rm -f HELLO main.o hello.o
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c main.c
  gcc -c hello.c
  gcc main.o hello.o -o HELLO
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rwxrwxr-x. 1 makoto makoto 8.3K 12月  3 22:15 HELLO     // ビルドで作成された実行ファイル
  -rw-rw-r--. 1 makoto makoto  265 12月  3 22:04 Makefile  // Makefile
  -rw-rw-r--. 1 makoto makoto  139 12月  3 22:01 hello.c   // ソースファイル
  -rw-rw-r--. 1 makoto makoto   64 12月  3 22:00 hello.h   // ヘッダファイル
  -rw-rw-r--. 1 makoto makoto 1.7K 12月  3 22:15 hello.o   // ビルドで作成された中間ファイル
  -rw-rw-r--. 1 makoto makoto  109 12月  3 22:01 main.c    // ソースファイル
  -rw-rw-r--. 1 makoto makoto 1.4K 12月  3 22:15 main.o    // ビルドで作成された中間ファイル
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[05]
  カーネルモジュールの作成 - 1 (カーネル 3.10.0)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
  
  ## 作業内容
    単純なカーネルモジュールを作成して、ロードとアンロード時の動作確認を行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ ls -lh | head -n 3
  
  コマンドの実行結果
  --------------------------------------------------
  lrwxrwxrwx.  1 root root   39 12月  1 19:31 build -> /usr/src/kernels/3.10.0-1160.el7.x86_64  // リンク先が無いため修正が必要
  drwxr-xr-x.  2 root root    6 10月 20  2020 extra
  drwxr-xr-x. 12 root root  128 12月  1 19:31 kernel
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ sudo rm build
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> リンク先が存在しないので削除
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ sudo ln -s /usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug build
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> リンクを張り直す
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir SAMP1
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ vi SAMP1.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/kernel.h>
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("SAMP1");
  
  // ロード時
  static int SAMP1_init(void)
  {
    printk( KERN_INFO "SAMP1 insmod\n" );
    return 0;
  }
  
  // アンロード時
  static void SAMP1_exit(void)
  {
    printk( KERN_INFO "SAMP1 rmmod\n" );
  }
  
  module_init( SAMP1_init );
  module_exit( SAMP1_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  // 既存ファイル(/lib/modules/3.10.0-1160.el7.x86_64/build/Makefile)のターゲットを利用している
  obj-m := SAMP1.o
  
  all:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
  
  clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP1 modules
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP1 clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP1 modules
  make[1]: ディレクトリ `/usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug' に入ります
    CC [M]  /home/makoto/SAMP1/SAMP1.o
    Building modules, stage 2.
    MODPOST 1 modules
    CC      /home/makoto/SAMP1/SAMP1.mod.o
    LD [M]  /home/makoto/SAMP1/SAMP1.ko
  make[1]: ディレクトリ `/usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug' から出ます
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto  167 12月  4 01:24 Makefile
  -rw-rw-r--. 1 makoto makoto    0 12月  4 01:25 Module.symvers
  -rw-rw-r--. 1 makoto makoto  412 12月  4 01:23 SAMP1.c
  -rw-rw-r--. 1 makoto makoto 103K 12月  4 01:25 SAMP1.ko  // 作成したカーネルモジュール
  -rw-rw-r--. 1 makoto makoto  907 12月  4 01:25 SAMP1.mod.c
  -rw-rw-r--. 1 makoto makoto  60K 12月  4 01:25 SAMP1.mod.o
  -rw-rw-r--. 1 makoto makoto  47K 12月  4 01:25 SAMP1.o
  -rw-rw-r--. 1 makoto makoto   35 12月  4 01:25 modules.order
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ modinfo SAMP1.ko
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP1/SAMP1.ko
  description:    SAMP1
  author:         Makoto-Araki
  license:        GPL
  retpoline:      Y
  rhelversion:    7.9
  srcversion:     0572C8074A39EE01460F758
  depends:        (依存するモジュールなし)
  vermagic:       3.10.0-1160.49.1.el7.x86_64.debug SMP mod_unload modversions
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo insmod SAMP1.ko
  
  コマンドの実行結果
  --------------------------------------------------
  // ロード時にエラー
  
  [21067.298558] SAMP1: disagrees about version of symbol module_layout
  insmod: ERROR: could not insert module SAMP1.ko: Invalid module format
  --------------------------------------------------
  
  エラー出力の原因は不明、同じ作業内容で新カーネル(4.15.3)下では成功している、よって新カーネル時に再挑戦する
  
================================================================================

