================================================================================
[01] カーネルバージョン
[02] カーネルイメージ
[03] カーネルモジュールの調査
[04] ビルド練習
[05] カーネルモジュールの作成 - 1 (カーネル 3.10.0)
[06] カーネルモジュールの作成 - 2 (カーネル 3.10.0)
[07] カーネルのコンパイル
[08] カーネルモジュールの作成 - 3 (カーネル 4.15.3)
[09] カーネルモジュールの作成 - 4 (カーネル 4.15.3)
[10] カーネルモジュール起動時にパラメータ値を指定可能にする
[11] カーネルモジュール起動時にパラメータ値を設定ファイルから指定可能にする
[12] カーネルパラメータ - 1
[13] カーネルパラメータ - 2
[14] カーネルパラメータ - 3
[15] 初期RAMディスク - 1 (既存)
[16] 初期RAMディスク - 2 (作成)
[17] 仮想ファイルシステム
[18] デバイス(PCI)
[19] デバイス(USB)
[20] デバイスファイル
[21] ループバックデバイス
[22] 動的デバイス管理 - 1 (ルール記述)
[23] 動的デバイス管理 - 2 (udevadm info)
================================================================================
[01]
  カーネルバージョン
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    コマンド(uname)から調査する
    仮想ファイル(/proc/version)から調査する
    カーネルソースのファイル(Makefile)から調査する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.0-1160.el7.x86_64 -> 3(メジャー番号)、10(マイナー番号)、0(リリース番号)、-1160.el7.x86_64(エクストラ番号)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/version (仮想ファイルから調査)
  
  コマンドの実行結果
  --------------------------------------------------
  Linux version 3.10.0-1160.el7.x86_64 (省略) -> コマンド(uname)と同一
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo find /usr/src -name $(uname -r) (カーネルソースのパス検索)
  
  コマンドの実行結果
  --------------------------------------------------
  /usr/src/kernels/3.10.0-1160.el7.x86_64
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/3.10.0-1160.el7.x86_64
  vm12$ head -n 4 Makefile (Makefileから調査)
  
  コマンドの実行結果
  --------------------------------------------------
  VERSION = 3                           // メジャー番号
  PATCHLEVEL = 10                       // マイナー番号
  SUBLEVEL = 0                          // リリース番号
  EXTRAVERSION = -1160.45.1.el7.x86_64  // エクストラ番号
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[02]
  カーネルイメージ
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    パス(/boot)から調査する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.0-1160.el7.x86_64 -> 3(メジャー番号)、10(マイナー番号)、0(リリース番号)、-1160.el7.x86_64(エクストラ番号)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo find /boot -name vmlinuz-$(uname -r) (カーネルイメージファイルを検索)
  
  コマンドの実行結果
  --------------------------------------------------
  /boot/vmlinuz-3.10.0-1160.el7.x86_64
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[03]
  カーネルモジュールの調査
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    パス(/lib/modules)から調査 -> サンプルとしてファイルシステム(xfs)のカーネルモジュールの調査する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  3.10.0-1160.el7.x86_64 -> 3(メジャー番号)、10(マイナー番号)、0(リリース番号)、-1160.el7.x86_64(エクストラ番号)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo find /lib/modules -name $(uname -r) (カーネルモジュールのディレクトリを検索)
  
  コマンドの実行結果
  --------------------------------------------------
  /lib/modules/3.10.0-1160.el7.x86_64
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64
  vm12$ ls -lh (カーネルモジュールのディレクトリ内のファイル一覧)
  
  コマンドの実行結果
  --------------------------------------------------
  lrwxrwxrwx.  1 root root   39 12月  1 19:31 build -> /usr/src/kernels/3.10.0-1160.el7.x86_64
  drwxr-xr-x.  2 root root    6 10月 20  2020 extra
  drwxr-xr-x. 12 root root  128 12月  1 19:31 kernel               // カーネルモジュール格納場所
  -rw-r--r--.  1 root root 841K 12月  1 19:40 modules.alias        // カーネルモジュール別名
  -rw-r--r--.  1 root root 801K 12月  1 19:40 modules.alias.bin    // 不明
  -rw-r--r--.  1 root root 1.4K 10月 20  2020 modules.block        // 不明
  -rw-r--r--.  1 root root 7.3K 10月 20  2020 modules.builtin      // 不明
  -rw-r--r--.  1 root root 9.3K 12月  1 19:40 modules.builtin.bin  // 不明
  -rw-r--r--.  1 root root 267K 12月  1 19:40 modules.dep          // カーネルモジュール依存関係 -> 後の方でも参照するので留意
  -rw-r--r--.  1 root root 374K 12月  1 19:40 modules.dep.bin
  -rw-r--r--.  1 root root  361 12月  1 19:40 modules.devname
  -rw-r--r--.  1 root root  140 10月 20  2020 modules.drm
  -rw-r--r--.  1 root root   69 10月 20  2020 modules.modesetting
  -rw-r--r--.  1 root root 1.8K 10月 20  2020 modules.networking
  -rw-r--r--.  1 root root  96K 10月 20  2020 modules.order
  -rw-r--r--.  1 root root  569 12月  1 19:40 modules.softdep
  -rw-r--r--.  1 root root 389K 12月  1 19:40 modules.symbols
  -rw-r--r--.  1 root root 475K 12月  1 19:40 modules.symbols.bin
  lrwxrwxrwx.  1 root root    5 12月  1 19:31 source -> build
  drwxr-xr-x.  2 root root    6 10月 20  2020 updates
  drwxr-xr-x.  2 root root   95 12月  1 19:31 vdso
  drwxr-xr-x.  2 root root    6 10月 20  2020 weak-updates
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64/kernel
  vm12$ ls -lh (カーネルモジュール内のサブディレクトリ一覧)
  
  コマンドの実行結果
  --------------------------------------------------
  drwxr-xr-x.  3 root root   17 12月  1 19:31 arch     // アーキテクチャ
  drwxr-xr-x.  3 root root 4.0K 12月  1 19:31 crypto   // 暗号化
  drwxr-xr-x. 72 root root 4.0K 12月  1 19:31 drivers  // ドライバ
  drwxr-xr-x. 26 root root 4.0K 12月  1 19:31 fs       // ファイルシステム -> ここからファイルシステム(xfs)のカーネルモジュールの調査
  drwxr-xr-x.  3 root root   19 12月  1 19:31 kernel   // カーネル
  drwxr-xr-x.  4 root root  249 12月  1 19:31 lib      // ライブラリ
  drwxr-xr-x.  2 root root   35 12月  1 19:31 mm       // メモリ
  drwxr-xr-x. 34 root root 4.0K 12月  1 19:31 net      // ネットワーク
  drwxr-xr-x. 12 root root  173 12月  1 19:31 sound    // サウンド -> 仮想マシンでは不要
  drwxr-xr-x.  3 root root   17 12月  1 19:31 virt     // 仮想環境 -> 仮想マシンでは不要
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64/kernel
  vm12$ sudo find fs/ -name xfs (xfsのカーネルモジュールを検索)
  
  コマンドの実行結果
  --------------------------------------------------
  fs/xfs -> 実体はディレクトリ
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64/kernel/fs/xfs
  vm12$ ls -lh (ディレクトリ内のカーネルモジュールの実体ファイル名を表示)
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-r--r--. 1 root root 328K 10月 20  2020 xfs.ko.xz
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ modinfo xfs (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /lib/modules/3.10.0-1160.el7.x86_64/kernel/fs/xfs/xfs.ko.xz  // 実体ファイルのパス
  license:        GPL                                                          // ライセンス
  description:    SGI XFS with ACLs, security attributes, no debug enabled     // 説明
  author:         Silicon Graphics, Inc.                                       // 作者
  alias:          fs-xfs                                                       // 別名
  retpoline:      Y                                                            // 不明
  rhelversion:    7.9                                                          // 不明
  srcversion:     ACB9CF86C248DD09DC2B428                                      // 不明
  depends:        libcrc32c                                                    // 依存関係(xfsはlibcrc32cに依存している)
  intree:         Y
  vermagic:       3.10.0-1160.el7.x86_64 SMP mod_unload modversions 
  signer:         CentOS Linux kernel signing key
  sig_key:        E1:FD:B0:E2:A7:E8:61:A1:D1:CA:80:A2:3D:CF:0D:BA:3A:A4:AD:F5
  sig_hashalgo:   sha256
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lsmod | grep xfs (カーネルモジュール一覧からターゲット抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  xfs       997727  2 -> 他モジュールから参照されていない
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lsmod | grep libcrc32c (カーネルモジュール一覧からターゲット抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  libcrc32c  12644  3  xfs,nf_nat,nf_conntrack -> 他モジュールから参照されている
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/modules | grep xfs (仮想ファイルからターゲット抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  xfs 997727 2 - Live 0x0000000000000000 -> 他モジュールから参照されていない
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/modules | grep libcrc32c (仮想ファイルからターゲット抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  libcrc32c 12644 3 nf_nat,nf_conntrack,xfs, Live 0x0000000000000000 -> 他モジュールから参照されている
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64
  vm12$ grep xfs modules.dep (依存関係ファイルからターゲット抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  kernel/fs/xfs/xfs.ko.xz: kernel/lib/libcrc32c.ko.xz -> xfsはlibcrc32cに依存している
  --------------------------------------------------
  
  vm12$ cd /lib/modules/3.10.0-1160.el7.x86_64
  vm12$ grep libcrc32c modules.dep (依存関係ファイルからターゲット抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 様々なモジュールがlibcrc32cに依存しているため出力多数
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[04]
  ビルド練習
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    簡単なプログラム作成後に、Makefileによるビルドを行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo yum -y groupinstall '開発ツール'
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 開発ツール一式をインストール
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir HELLO
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.h (ヘッダファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  // 関数実装
  void Hello1(void) { printf("Hello1\n"); }
  void Hello2(void) { printf("Hello2\n"); }
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi main.c (プログラム本体)
  
  コマンドの実行結果
  --------------------------------------------------
  #include "hello.h"
  
  int main(void)
  {
    Hello1();  // 関数呼出
    Hello2();  // 関数呼出
    return 0;
  }
  --------------------------------------------------
  
  備考
  ==================================================
  ビルド自体は「Makefile」不使用でも「gcc -o HELLO main.c hello.c」で可能。
  しかし今回は「Makefile」使用でビルドを行う。
  ==================================================
  
  vm12$ cd $HOME/HELLO
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  PROG := HELLO
  OBJ1 := main.o
  OBJ2 := hello.o
  SRC1 := main.c
  SRC2 := hello.c
  COMP := gcc
  
  // ビルド -> 単にmakeと実行した場合は一番上のターゲットが実行される
  $(PROG): $(OBJ1) $(OBJ2)
    $(COMP) $(OBJ1) $(OBJ2) -o $(PROG)  // 行頭のインデントはtabキー
  
  // main.o
  $(OBJ1): $(SRC1)
    $(COMP) -c $(SRC1)
  
  // hello.o
  $(OBJ2): $(SRC2)
    $(COMP) -c $(SRC2)
  
  // 削除
  clean:
    rm -f $(PROG) $(OBJ1) $(OBJ2)
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c main.c
  gcc -c hello.c
  gcc main.o hello.o -o HELLO
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n main.o (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c main.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n hello.o (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  rm -f HELLO main.o hello.o
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  gcc -c main.c
  gcc -c hello.c
  gcc main.o hello.o -o HELLO
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rwxrwxr-x. 1 makoto makoto 8.3K 12月  3 22:15 HELLO     // ビルドで作成された実行ファイル
  -rw-rw-r--. 1 makoto makoto  265 12月  3 22:04 Makefile  // Makefile
  -rw-rw-r--. 1 makoto makoto  139 12月  3 22:01 hello.c   // ソースファイル
  -rw-rw-r--. 1 makoto makoto   64 12月  3 22:00 hello.h   // ヘッダファイル
  -rw-rw-r--. 1 makoto makoto 1.7K 12月  3 22:15 hello.o   // ビルドで作成された中間ファイル
  -rw-rw-r--. 1 makoto makoto  109 12月  3 22:01 main.c    // ソースファイル
  -rw-rw-r--. 1 makoto makoto 1.4K 12月  3 22:15 main.o    // ビルドで作成された中間ファイル
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[05]
  カーネルモジュールの作成 - 1 (カーネル 3.10.0)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
  
  ## 作業内容
    単純なカーネルモジュールを作成して、ロードとアンロード時の動作確認を行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ ls -lh | head -n 3
  
  コマンドの実行結果
  --------------------------------------------------
  lrwxrwxrwx.  1 root root   39 12月  1 19:31 build -> /usr/src/kernels/3.10.0-1160.el7.x86_64  // リンク先が無いため修正が必要
  drwxr-xr-x.  2 root root    6 10月 20  2020 extra
  drwxr-xr-x. 12 root root  128 12月  1 19:31 kernel
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ sudo rm build
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> リンク先が存在しないので削除
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ sudo ln -s /usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug build
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> リンクを張り直す
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir SAMP1
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ vi SAMP1.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/kernel.h>
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("SAMP1");
  
  // ロード時
  static int SAMP1_init(void)
  {
    printk( KERN_INFO "SAMP1 init\n" );
    return 0;
  }
  
  // アンロード時
  static void SAMP1_exit(void)
  {
    printk( KERN_INFO "SAMP1 exit\n" );
  }
  
  module_init( SAMP1_init );
  module_exit( SAMP1_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  // 既存ファイル(/lib/modules/3.10.0-1160.el7.x86_64/build/Makefile)のターゲットを利用している
  obj-m := SAMP1.o
  
  all:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
  
  clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP1 modules
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP1 clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP1 modules
  make[1]: ディレクトリ `/usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug' に入ります
    CC [M]  /home/makoto/SAMP1/SAMP1.o
    Building modules, stage 2.
    MODPOST 1 modules
    CC      /home/makoto/SAMP1/SAMP1.mod.o
    LD [M]  /home/makoto/SAMP1/SAMP1.ko
  make[1]: ディレクトリ `/usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug' から出ます
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto  167 12月  4 01:24 Makefile
  -rw-rw-r--. 1 makoto makoto    0 12月  4 01:25 Module.symvers
  -rw-rw-r--. 1 makoto makoto  412 12月  4 01:23 SAMP1.c
  -rw-rw-r--. 1 makoto makoto 103K 12月  4 01:25 SAMP1.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto  907 12月  4 01:25 SAMP1.mod.c
  -rw-rw-r--. 1 makoto makoto  60K 12月  4 01:25 SAMP1.mod.o
  -rw-rw-r--. 1 makoto makoto  47K 12月  4 01:25 SAMP1.o
  -rw-rw-r--. 1 makoto makoto   35 12月  4 01:25 modules.order
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ modinfo SAMP1.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP1/SAMP1.ko
  description:    SAMP1
  author:         Makoto-Araki
  license:        GPL
  retpoline:      Y
  rhelversion:    7.9
  srcversion:     0572C8074A39EE01460F758
  depends:        (依存するモジュールなし)
  vermagic:       3.10.0-1160.49.1.el7.x86_64.debug SMP mod_unload modversions
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo insmod SAMP1.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  // ロード時にエラー
  
  [21067.298558] SAMP1: disagrees about version of symbol module_layout
  insmod: ERROR: could not insert module SAMP1.ko: Invalid module format
  --------------------------------------------------
  
  エラー出力の原因は不明、同じ作業内容で新カーネル(4.15.3)下では成功している、よって新カーネル時に再挑戦する
  
================================================================================
[06]
  カーネルモジュールの作成 - 2 (カーネル 3.10.0)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
    前記録(05)と同様にリンク張り直し
  
  ## 作業内容
    他モジュールに依存するカーネルモジュールを作成して、ロードとアンロード時の動作確認を行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir SAMP2
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ vi BASE.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/init.h>
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("BASE");
  
  // ロード時
  static int BASE_init(void)
  {
    printk(KERN_INFO "BASE init\n");
    return 0;
  }
  
  // アンロード時
  static void BASE_exit(void)
  {
    printk(KERN_INFO "BASE exit\n");
  }
	
  // 他モジュールから実行
  void FUNC1(void)
  {
    printk(KERN_INFO "FUNC1 call\n");
  }
  
  // 他モジュールから実行
  void FUNC2(void)
  {
    printk(KERN_INFO "FUNC2 call\n");
  }
  
  // マクロエクスポート
  EXPORT_SYMBOL(FUNC1);
  EXPORT_SYMBOL(FUNC2);
  
  module_init( BASE_init );
  module_exit( BASE_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ vi SAMP2.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/kernel.h>
  
  // プロトタイプ宣言
  void FUNC1(void);
  void FUNC2(void);
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("SAMP2");
  
  // ロード時
  static int SAMP2_init(void)
  {
    printk( KERN_INFO "SAMP2 init\n" );
    FUNC1();  // 他モジュールの関数実行
    FUNC2();  // 他モジュールの関数実行
    return 0;
  }
  
  // アンロード時
  static void SAMP2_exit(void)
  {
    printk( KERN_INFO "SAMP2 exit\n" );
  }
  
  module_init( SAMP2_init );
  module_exit( SAMP2_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  // 既存ファイル(/lib/modules/3.10.0-1160.el7.x86_64/build/Makefile)のターゲットを利用している
  obj-m := SAMP2.o BASE.o
  
  all:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
  
  clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP2 modules
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP2 clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/3.10.0-1160.el7.x86_64/build M=/home/makoto/SAMP2 modules
  make[1]: ディレクトリ `/usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug' に入ります
    CC [M]  /home/makoto/SAMP2/SAMP2.o
    CC [M]  /home/makoto/SAMP2/BASE.o
    Building modules, stage 2.
    MODPOST 2 modules
    CC      /home/makoto/SAMP2/BASE.mod.o
    LD [M]  /home/makoto/SAMP2/BASE.ko
    CC      /home/makoto/SAMP2/SAMP2.mod.o
    LD [M]  /home/makoto/SAMP2/SAMP2.ko
  make[1]: ディレクトリ `/usr/src/kernels/3.10.0-1160.49.1.el7.x86_64.debug' から出ます
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto  653 12月  4 08:22 BASE.c
  -rw-rw-r--. 1 makoto makoto 106K 12月  4 08:22 BASE.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto  907 12月  4 08:22 BASE.mod.c
  -rw-rw-r--. 1 makoto makoto  60K 12月  4 08:22 BASE.mod.o
  -rw-rw-r--. 1 makoto makoto  51K 12月  4 08:22 BASE.o
  -rw-rw-r--. 1 makoto makoto  174 12月  4 08:11 Makefile
  -rw-rw-r--. 1 makoto makoto  110 12月  4 08:22 Module.symvers
  -rw-rw-r--. 1 makoto makoto  572 12月  4 08:11 SAMP2.c
  -rw-rw-r--. 1 makoto makoto 104K 12月  4 08:22 SAMP2.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto 1003 12月  4 08:22 SAMP2.mod.c
  -rw-rw-r--. 1 makoto makoto  60K 12月  4 08:22 SAMP2.mod.o
  -rw-rw-r--. 1 makoto makoto  47K 12月  4 08:22 SAMP2.o
  -rw-rw-r--. 1 makoto makoto   69 12月  4 08:22 modules.order
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ modinfo BASE.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP2/BASE.ko
  description:    BASE
  author:         Makoto-Araki
  license:        GPL
  retpoline:      Y
  rhelversion:    7.9
  srcversion:     E016EF647291F6D9B2AA3B1
  depends:        (依存するモジュールなし)
  vermagic:       3.10.0-1160.49.1.el7.x86_64.debug SMP mod_unload modversions 
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ modinfo SAMP2.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP2/SAMP2.ko
  description:    SAMP2
  author:         Makoto-Araki
  license:        GPL
  retpoline:      Y
  rhelversion:    7.9
  srcversion:     49A174EE835D257C700DFC1
  depends:        BASE  // BASEモジュールに依存している
  vermagic:       3.10.0-1160.49.1.el7.x86_64.debug SMP mod_unload modversions 
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo insmod BASE.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  // ロード時にエラー
  
  [ 4354.345201] BASE: disagrees about version of symbol module_layout
  insmod: ERROR: could not insert module BASE.ko: Invalid module format
  --------------------------------------------------
  
  これもエラー出力の原因は不明、同じ作業内容で新カーネル(4.15.3)下では成功している、よって新カーネル時に再挑戦する
  
================================================================================
[07]
  カーネルのコンパイル
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
  
  ## 作業内容
    新カーネル(4.15.3)をコンパイル
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo yum -y install kernel-devel ncurses-devel wget elfutils-libelf-devel openssl-devel bc (パッケージ追加)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 開発ツール内に同梱されていないのでカーネル開発に必要なパッケージなのか？
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels
  vm12$ ls -lh (カーネルソースのディレクトリに移動)
  
  コマンドの実行結果
  --------------------------------------------------
  drwxr-xr-x. 22 root root 4.0K 12月  4 10:21 3.10.0-1160.49.1.el7.x86_64
  drwxr-xr-x. 22 root root 4.0K 12月  3 22:12 3.10.0-1160.49.1.el7.x86_64.debug
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels
  vm12$ sudo wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.15.3.tar.xz (カーネルソースのダウンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels
  vm12$ sudo xz -d linux-4.15.3.tar.xz (カーネルソースの解凍)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> unxzコマンドでもOK
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels
  vm12$ sudo tar xf linux-4.15.3.tar (カーネルソースの展開)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels
  vm12$ sudo rm -f linux-4.15.3.tar (アーカイブファイルの削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 余分なアーカイブは削除
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels
  vm12$ ls -lh (カーネルソースのディレクトリに移動)
  
  コマンドの実行結果
  --------------------------------------------------
  drwxr-xr-x. 22 root root 4.0K 12月  4 10:21 3.10.0-1160.49.1.el7.x86_64
  drwxr-xr-x. 22 root root 4.0K 12月  3 22:12 3.10.0-1160.49.1.el7.x86_64.debug
  drwxrwxr-x. 24 root root 4.0K  2月 12  2018 linux-4.15.3  // 新カーネル(4.15.3)
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ make menuconfig (新カーネルの設定変更)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 設定ファイル(.config)が作成される
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ sudo nice -n -10 make (優先度「-10」を指定して新カーネルをビルド)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 4時間程で完了
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ sudo make modules_install (カーネルモジュールをインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 10分程で完了
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ sudo make install (カーネル本体をインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  sh ./arch/x86/boot/install.sh 4.15.3 arch/x86/boot/bzImage System.map "/boot" -> カーネルイメージの圧縮形式はbzimage
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ df -lh (ディスク容量を確認)
  
  コマンドの実行結果
  --------------------------------------------------
  ファイルシス                       サイズ   使用    残り  使用% マウント位置
  devtmpfs                       484M     0  484M    0% /dev
  tmpfs                          496M     0  496M    0% /dev/shm
  tmpfs                          496M  6.7M  489M    2% /run
  tmpfs                          496M     0  496M    0% /sys/fs/cgroup
  /dev/mapper/centos_vm11-root    17G   15G  2.4G   87% /(使用率が87%でディスク容量を圧迫)
  /dev/vda1                     1014M  188M  827M   19% /boot
  tmpfs                          100M     0  100M    0% /run/user/1000
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ sudo make clean (中間ファイル削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 設定ファイル(.config)は残る
  --------------------------------------------------
  
  vm12$ cd /usr/src/kernels/linux-4.15.3
  vm12$ df -lh (ディスク容量を確認)
  
  コマンドの実行結果
  --------------------------------------------------
  ファイルシス                       サイズ   使用    残り  使用% マウント位置
  devtmpfs                       484M     0  484M    0% /dev
  tmpfs                          496M     0  496M    0% /dev/shm
  tmpfs                          496M  6.7M  489M    2% /run
  tmpfs                          496M     0  496M    0% /sys/fs/cgroup
  /dev/mapper/centos_vm11-root    17G  5.2G   12G   31% /(87%から31%まで激減)
  /dev/vda1                     1014M  188M  827M   19% /boot
  tmpfs                          100M     0  100M    0% /run/user/1000
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo grub2-editenv list (デフォルト起動されるカーネル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  saved_entry=CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core) -> デフォルト起動は旧パージョンのカーネルのまま
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo grep -E ^menu /etc/grub2.cfg (起動可能なカーネルリストを番号表示)
  
  コマンドの実行結果
  --------------------------------------------------
  menuentry 'CentOS Linux (4.15.3) 7 (Core)'                                     // 0
  menuentry 'CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)'                     // 1
  menuentry 'CentOS Linux (0-rescue-5685550d34954a16aab7e36c1390eb86) 7 (Core)'  // 2
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo grub2-set-default 0 (デフォルト起動されるカーネルを番号指定)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> デフォルト起動されるカーネルを新カーネル(4.15.3)に変更
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo grub2-editenv list (デフォルト起動されるカーネル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  saved_entry=0 -> 新カーネル(4.15.3)の番号を確認
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo systemctl reboot (システム再起動)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> カーネル選択画面に新カーネル(4.15.3)が確認できた
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ uname -r
  
  コマンドの実行結果
  --------------------------------------------------
  4.15.3 -> 起動後に新カーネル(4.15.3)を確認
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[08]
  カーネルモジュールの作成 - 3 (カーネル 4.15.3)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
  
  ## 作業内容
    単純なカーネルモジュールを作成して、ロードとアンロード時の動作確認を行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ vi SAMP1.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/kernel.h>
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("SAMP1");
  
  // ロード時
  static int SAMP1_init(void)
  {
    printk( KERN_INFO "SAMP1 init\n" );
    return 0;
  }
  
  // アンロード時
  static void SAMP1_exit(void)
  {
    printk( KERN_INFO "SAMP1 exit\n" );
  }
  
  module_init( SAMP1_init );
  module_exit( SAMP1_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  // 既存ファイル(/lib/modules/4.15.3/build/Makefile)のターゲットを利用している
  obj-m := SAMP1.o
  
  all:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
  
  clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP1 modules
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP1 clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP1 modules
  make[1]: ディレクトリ `/usr/src/kernels/linux-4.15.3' に入ります
    CC [M]  /home/makoto/SAMP1/SAMP1.o
    Building modules, stage 2.
    MODPOST 1 modules
    CC      /home/makoto/SAMP1/SAMP1.mod.o
    LD [M]  /home/makoto/SAMP1/SAMP1.ko
  make[1]: ディレクトリ `/usr/src/kernels/linux-4.15.3' から出ます
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto  167 12月  4 01:24 Makefile
  -rw-rw-r--. 1 makoto makoto    0 12月  4 17:03 Module.symvers
  -rw-rw-r--. 1 makoto makoto  412 12月  4 01:23 SAMP1.c
  -rw-rw-r--. 1 makoto makoto 121K 12月  4 17:03 SAMP1.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto  853 12月  4 17:03 SAMP1.mod.c
  -rw-rw-r--. 1 makoto makoto  70K 12月  4 17:03 SAMP1.mod.o
  -rw-rw-r--. 1 makoto makoto  55K 12月  4 17:03 SAMP1.o
  -rw-rw-r--. 1 makoto makoto   35 12月  4 17:03 modules.order
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ modinfo SAMP1.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP1/SAMP1.ko
  description:    SAMP1
  author:         Makoto-Araki
  license:        GPL
  srcversion:     0572C8074A39EE01460F758
  depends:        (依存しているモジュールなし)
  retpoline:      Y
  name:           SAMP1
  vermagic:       4.15.3 SMP mod_unload modversions 
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo insmod SAMP1.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [ 2232.313479] SAMP1 init
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo rmmod SAMP1.ko (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [ 2258.205023] SAMP1 exit
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo modprobe SAMP1.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  modprobe: FATAL: Module SAMP1.ko not found. -> モジュールが認識されない
  --------------------------------------------------
  
  コマンド(modprobe)のマニュアルより抜粋
  ==================================================
  ・動作時に依存関係ファイル(modules.dep)参照
  ・依存関係ファイル(modules.dep)はコマンド(depmod)で作成
  ・コマンド(depmod)は「/lib/modules/$(uname -r)/kernel」配下の各モジュールを精査して依存関係ファイル(modules.dep)を更新
  ==================================================
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo cp -p *.ko /lib/modules/$(uname -r)/kernel/kernel (カーネルモジュールをコピー)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo depmod (依存関係ファイルを更新)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 30秒ほど時間がかかった
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ grep SAMP1 modules.dep (依存関係ファイルを確認)
  
  コマンドの実行結果
  --------------------------------------------------
  kernel/kernel/SAMP1.ko: -> 依存するカーネルモジュールなし
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo modprobe SAMP1 (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [ 3126.669130] SAMP1 init
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo modprobe -r SAMP1 (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [ 3135.431846] SAMP1 exit
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP1
  vm12$ sudo modprobe --show-depends SAMP1 (カーネルモジュールの依存関係を表示)
  
  コマンドの実行結果
  --------------------------------------------------
  insmod /lib/modules/4.15.3/kernel/kernel/SAMP1.ko
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[09]
  カーネルモジュールの作成 - 4 (カーネル 4.15.3)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
  
  ## 作業内容
    他モジュールに依存するカーネルモジュールを作成して、ロードとアンロード時の動作確認を行う
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir SAMP2
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ vi BASE.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/init.h>
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("BASE");
  
  // ロード時
  static int BASE_init(void)
  {
    printk(KERN_INFO "BASE init\n");
    return 0;
  }
  
  // アンロード時
  static void BASE_exit(void)
  {
    printk(KERN_INFO "BASE exit\n");
  }
	
  // 他モジュールから実行
  void FUNC1(void)
  {
    printk(KERN_INFO "FUNC1 call\n");
  }
  
  // 他モジュールから実行
  void FUNC2(void)
  {
    printk(KERN_INFO "FUNC2 call\n");
  }
  
  // マクロエクスポート
  EXPORT_SYMBOL(FUNC1);
  EXPORT_SYMBOL(FUNC2);
  
  module_init( BASE_init );
  module_exit( BASE_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ vi SAMP2.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/kernel.h>
  
  // プロトタイプ宣言
  void FUNC1(void);
  void FUNC2(void);
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("SAMP2");
  
  // ロード時
  static int SAMP2_init(void)
  {
    printk( KERN_INFO "SAMP2 init\n" );
    FUNC1();  // 他モジュールの関数実行
    FUNC2();  // 他モジュールの関数実行
    return 0;
  }
  
  // アンロード時
  static void SAMP2_exit(void)
  {
    printk( KERN_INFO "SAMP2 exit\n" );
  }
  
  module_init( SAMP2_init );
  module_exit( SAMP2_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  // 既存ファイル(/lib/modules/4.15.3/build/Makefile)のターゲットを利用している
  obj-m := SAMP2.o BASE.o
  
  all:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
  
  clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP2 modules
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP2 clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP2 modules
  make[1]: ディレクトリ `/usr/src/kernels/linux-4.15.3' に入ります
    CC [M]  /home/makoto/SAMP2/SAMP2.o
    CC [M]  /home/makoto/SAMP2/BASE.o
    Building modules, stage 2.
    MODPOST 2 modules
    CC      /home/makoto/SAMP2/BASE.mod.o
    LD [M]  /home/makoto/SAMP2/BASE.ko
    CC      /home/makoto/SAMP2/SAMP2.mod.o
    LD [M]  /home/makoto/SAMP2/SAMP2.ko
  make[1]: ディレクトリ `/usr/src/kernels/linux-4.15.3' から出ます
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto  653 12月  4 08:22 BASE.c
  -rw-rw-r--. 1 makoto makoto 124K 12月  4 19:19 BASE.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto  853 12月  4 19:19 BASE.mod.c
  -rw-rw-r--. 1 makoto makoto  70K 12月  4 19:19 BASE.mod.o
  -rw-rw-r--. 1 makoto makoto  59K 12月  4 19:19 BASE.o
  -rw-rw-r--. 1 makoto makoto  174 12月  4 08:11 Makefile
  -rw-rw-r--. 1 makoto makoto  110 12月  4 19:19 Module.symvers
  -rw-rw-r--. 1 makoto makoto  572 12月  4 08:11 SAMP2.c
  -rw-rw-r--. 1 makoto makoto 122K 12月  4 19:19 SAMP2.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto  949 12月  4 19:19 SAMP2.mod.c
  -rw-rw-r--. 1 makoto makoto  70K 12月  4 19:19 SAMP2.mod.o
  -rw-rw-r--. 1 makoto makoto  56K 12月  4 19:19 SAMP2.o
  -rw-rw-r--. 1 makoto makoto   69 12月  4 19:19 modules.order
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ modinfo BASE.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP2/BASE.ko
  description:    BASE
  author:         Makoto-Araki
  license:        GPL
  srcversion:     E016EF647291F6D9B2AA3B1
  depends:        (依存しているモジュールなし)
  retpoline:      Y
  name:           BASE
  vermagic:       4.15.3 SMP mod_unload modversions 
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ modinfo SAMP2.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP2/SAMP2.ko
  description:    SAMP2
  author:         Makoto-Araki
  license:        GPL
  srcversion:     49A174EE835D257C700DFC1
  depends:        BASE (BASEモジュールに依存している)
  retpoline:      Y
  name:           SAMP2
  vermagic:       4.15.3 SMP mod_unload modversions 
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo insmod BASE.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [10581.265252] BASE init
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo insmod SAMP2.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [10656.654101] SAMP2 init
  [10656.655444] FUNC1 call  // BASEモジュールの関数実行
  [10656.656737] FUNC2 call  // BASEモジュールの関数実行
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo rmmod SAMP2.ko (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [11112.022312] SAMP2 exit
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo rmmod BASE.ko (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [11132.527612] BASE exit
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo modprobe SAMP2.ko
  
  コマンドの実行結果
  --------------------------------------------------
  modprobe: FATAL: Module SAMP2.ko not found. -> モジュールが認識されない
  --------------------------------------------------
  
  コマンド(modprobe)のマニュアルより抜粋
  ==================================================
  ・動作時に依存関係ファイル(modules.dep)参照
  ・依存関係ファイル(modules.dep)はコマンド(depmod)で作成
  ・コマンド(depmod)は「/lib/modules/$(uname -r)/kernel」配下の各モジュールを精査して依存関係ファイル(modules.dep)を更新
  ==================================================
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo cp -p *.ko /lib/modules/$(uname -r)/kernel/kernel (カーネルモジュールをコピー)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo depmod (依存関係ファイルを更新)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 30秒ほど時間がかかった
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ grep SAMP2 modules.dep (依存関係ファイルを確認)
  
  コマンドの実行結果
  --------------------------------------------------
  kernel/kernel/SAMP2.ko: kernel/kernel/BASE.ko -> BASEモジュールに依存している
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo modprobe SAMP2 (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [ 4257.186021] BASE  init
  [ 4257.188085] SAMP2 init
  [ 4257.189769] FUNC1 call
  [ 4257.191540] FUNC2 call
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo modprobe -r SAMP2 (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [ 4333.662174] SAMP2 exit
  [ 4333.664376] BASE  exit // BASEモジュールまでアンロード
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP2
  vm12$ sudo modprobe --show-depends SAMP2 (カーネルモジュールの依存関係を表示)
  
  コマンドの実行結果
  --------------------------------------------------
  insmod /lib/modules/4.15.3/kernel/kernel/BASE.ko 
  insmod /lib/modules/4.15.3/kernel/kernel/SAMP2.ko 
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[10]
  カーネルモジュール起動時にパラメータ値を指定可能にする
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(04)と同様に開発ツールをインストール
  
  ## 作業内容
    カーネルモジュール起動時にパラメータ値を指定可能にする
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ vi SAMP3.c (ソースファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  #include <linux/module.h>
  #include <linux/kernel.h>
  
  // ライセンス情報
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Makoto-Araki");
  MODULE_DESCRIPTION("SAMP3");
  
  // パラメータ値をソース記述
  static int P1 = 11;
  static int P2 = 22;
  
  // カーネルモジュールにパラメータ組込
  module_param(P1, int, S_IWUSR);
  module_param(P2, int, S_IWUSR);
  
  // ロード時
  static int SAMP3_init(void)
  {
    printk( KERN_INFO "SAMP3 init\n" );
    printk( KERN_INFO "P1 = %d\n", P1);  // パラメータ値を表示
    printk( KERN_INFO "P2 = %d\n", P2);  // パラメータ値を表示
    return 0;
  }
  
  // アンロード時
  static void SAMP3_exit(void)
  {
    printk( KERN_INFO "SAMP3 exit\n" );
  }
  
  module_init( SAMP3_init );
  module_exit( SAMP3_exit );
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ vi Makefile (Makefileを記述)
  
  コマンドの実行結果
  --------------------------------------------------
  // 既存ファイル(/lib/modules/4.15.3/build/Makefile)のターゲットを利用している
  obj-m := SAMP3.o
  
  all:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules
  
  clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ make -n (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP3 modules
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ make -n clean (実行処理をシミューレート)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP3 clean
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ make (ビルド実行)
  
  コマンドの実行結果
  --------------------------------------------------
  make -C /lib/modules/4.15.3/build M=/home/makoto/SAMP3 modules
  make[1]: ディレクトリ `/usr/src/kernels/linux-4.15.3' に入ります
    CC [M]  /home/makoto/SAMP3/SAMP3.o
    Building modules, stage 2.
    MODPOST 1 modules
    CC      /home/makoto/SAMP3/SAMP3.mod.o
    LD [M]  /home/makoto/SAMP3/SAMP3.ko
  make[1]: ディレクトリ `/usr/src/kernels/linux-4.15.3' から出ます
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto  167 12月  5 09:27 Makefile
  -rw-rw-r--. 1 makoto makoto    0 12月  5 09:28 Module.symvers
  -rw-rw-r--. 1 makoto makoto  750 12月  5 09:26 SAMP3.c
  -rw-rw-r--. 1 makoto makoto 140K 12月  5 09:28 SAMP3.ko  // カーネルモジュール
  -rw-rw-r--. 1 makoto makoto  907 12月  5 09:28 SAMP3.mod.c
  -rw-rw-r--. 1 makoto makoto  70K 12月  5 09:28 SAMP3.mod.o
  -rw-rw-r--. 1 makoto makoto  74K 12月  5 09:28 SAMP3.o
  -rw-rw-r--. 1 makoto makoto   35 12月  5 09:28 modules.order
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ modinfo SAMP3.ko (カーネルモジュールの詳細情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  filename:       /home/makoto/SAMP3/SAMP3.ko
  description:    SAMP3
  author:         Makoto-Araki
  license:        GPL
  srcversion:     0AFDE2C17C5A8A765462186
  depends:        (依存しているモジュールなし)
  retpoline:      Y
  name:           SAMP3
  vermagic:       4.15.3 SMP mod_unload modversions 
  parm:           P1:int  // 追加パラメータ
  parm:           P2:int  // 追加パラメータ
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ sudo insmod SAMP3.ko (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [15148.304716] SAMP3 init
  [15148.308218] P1 = 11  // 追加パラメータ
  [15148.309716] P2 = 22  // 追加パラメータ
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ sudo rmmod SAMP3.ko (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [15218.770141] SAMP3 exit
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ sudo cp -p *.ko /lib/modules/$(uname -r)/kernel/kernel (カーネルモジュールをコピー)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ sudo depmod (依存関係ファイルを更新)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 30秒ほど時間がかかった
  --------------------------------------------------
  
  vm12$ cd /lib/modules/$(uname -r)
  vm12$ grep SAMP3 modules.dep (依存関係ファイルを確認)
  
  コマンドの実行結果
  --------------------------------------------------
  kernel/kernel/SAMP3.ko: -> 依存するカーネルモジュールなし
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ sudo modprobe SAMP3 (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [15471.354057] SAMP3 init
  [15471.356595] P1 = 11  // 追加パラメータ
  [15471.359712] P2 = 22  // 追加パラメータ
  --------------------------------------------------
  
  vm12$ cd $HOME/SAMP3
  vm12$ sudo modprobe -r SAMP3 (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [15517.421718] SAMP3 exit
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[11]
  カーネルモジュール起動時にパラメータ値を設定ファイルから指定可能にする
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 前提条件
    前記録(10)の続き
  
  ## 作業内容
    カーネルモジュール起動時にパラメータ値を設定ファイルから指定可能にする
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd /etc/modprobe.d
  vm12$ sudo vi SAMP3.conf
  
  コマンドの実行結果
  --------------------------------------------------
  options SAMP3 P1=111
  options SAMP3 P2=222
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo modprobe SAMP3 (カーネルモジュールのロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [16644.997642] SAMP3 init
  [16644.999000] P1 = 111  // 設定ファイル値で起動
  [16645.000054] P2 = 222  // 設定ファイル値で起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo modprobe -r SAMP3 (カーネルモジュールのアンロード)
  
  コマンドの実行結果
  --------------------------------------------------
  [16661.261169] SAMP3 exit
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[12]
  カーネルパラメータ - 1
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    仮想ファイル上のカーネルパラメータを閲覧・更新する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/sys/net/ipv4/ip_forward (カーネルパラメータ値を閲覧)
  
  コマンドの実行結果
  --------------------------------------------------
  0 -> IPv4のパケット転送禁止
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo echo 1 > /proc/sys/net/ipv4/ip_forward (カーネルパラメータ値を更新)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> rootユーザーにならないとエラー
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/sys/net/ipv4/ip_forward (カーネルパラメータ値を閲覧)
  
  コマンドの実行結果
  --------------------------------------------------
  1 -> IPv4のパケット転送許可
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[13]
  カーネルパラメータ - 2
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    仮想ファイル上のカーネルパラメータをコマンド(sysctl)で閲覧・更新する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sysctl net/ipv4/ip_forward (カーネルパラメータ値を閲覧)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward = 0 -> IPv4のパケット転送禁止
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo sysctl -w net/ipv4/ip_forward=1 (カーネルパラメータ値を更新)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward = 1
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sysctl net/ipv4/ip_forward (カーネルパラメータ値を閲覧)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward = 1 -> IPv4のパケット転送許可
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[14]
  カーネルパラメータ - 3
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    設定ファイルでカーネルパラメータを永続化する -> 再起動後でも設定内容を保持
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sysctl net/ipv4/ip_forward (カーネルパラメータ値を閲覧)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward = 0 -> IPv4のパケット転送禁止
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo vi /etc/sysctl.conf (設定ファイルでカーネルパラメータの永続化)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward=1
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo sysctl -p /etc/sysctl.conf (設定ファイルからカーネルパラメータ値を反映)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward = 1
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo systemctl reboot (システム再起動)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sysctl net/ipv4/ip_forward (カーネルパラメータ値を閲覧)
  
  コマンドの実行結果
  --------------------------------------------------
  net.ipv4.ip_forward = 1 -> IPv4のパケット転送許可
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[15]
  初期RAMディスク - 1 (既存)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 初期RAMディスクの役割
    1. ファームウェア(BIOS)がマスターブートレコード(MBR)からブートローダー起動
    2. ブートローダー(GRUB)がカーネル起動
    3. カーネルがメモリに初期RAMディスクを展開
    4. 初期RAMディスク(ルートファイルシステムをマウントするためのコマンド群を持つ)がルートファイルシステムのマウントを行う
    5. 初期RAMディスクはルートファイルシステムに置換される
    6. プロセス(systemd)が起動する
  
  ## 作業内容
    仮想マシン上のカーネルイメージと初期RAMディスクを確認する
    初期RAMディスクの内容をコマンドで確認する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd /boot
  vm12$ ls -lh | grep -E 'vmlinuz|initramfs' (仮想マシン上のカーネルイメージと初期RAMディスクを確認)
  
  コマンドの実行結果
  --------------------------------------------------
  lrwxrwxrwx. 1 root root   20 12月  4 15:46 vmlinuz -> /boot/vmlinuz-4.15.3       // システムは新カーネル(4.15.3)を起動
  -rw-------. 1 root root  21M 12月  1 19:41 initramfs-3.10.0-1160.el7.x86_64.img  // 初期RAMディスク(3.10.0)
  -rw-------. 1 root root  41M 12月  4 15:53 initramfs-4.15.3.img                  // 初期RAMディスク(4.15.3)
  -rwxr-xr-x. 1 root root 6.5M 10月 20  2020 vmlinuz-3.10.0-1160.el7.x86_64        // カーネルイメージ(3.10.0)
  -rw-r--r--. 1 root root 7.2M 12月  4 15:46 vmlinuz-4.15.3                        // カーネルイメージ(4.15.3)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir RAM1
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM1
  vm12$ sudo cp -p /boot/initramfs-3.10.0-1160.el7.x86_64.img AAA.img (初期RAMディスクのコピー)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM1
  vm12$ sudo lsinitrd AAA.img (初期RAMディスクの内容をコマンドで確認)
  
  コマンドの実行結果
  --------------------------------------------------
  // 確認内容の初期RAMディスクとそのファイルサイズ
  Image: AAA.img: 41M
  Version: dracut-033-572.el7
  
  // 引数にファイル(AAA.img)を指定したためファイル指定のオプション(-f)指定の扱い
  Arguments: -f
  
  // モジュール一覧
  dracut modules:
  bash
  nss-softokn
  i18n
  network
  ifcfg
  drm
  plymouth
  dm
  kernel-modules
  lvm
  qemu
  qemu-net
  resume
  rootfs-block
  terminfo
  udev-rules
  biosdevname
  systemd
  usrmount
  base
  fs-lib
  microcode_ctl-fw_dir_override
  shutdown
  
  // 初期RAMディスク内のファイル一覧 -> コマンド群の確認のため「bin」配下のみ抜粋
  drwxr-xr-x  12 root     root            0 Dec  1 19:41 .
  crw-r--r--   1 root     root       5,   1 Dec  1 19:40 dev/console
  crw-r--r--   1 root     root       1,  11 Dec  1 19:40 dev/kmsg
  crw-r--r--   1 root     root       1,   3 Dec  1 19:40 dev/null
  lrwxrwxrwx   1 root     root            7 Dec  1 19:40 bin -> usr/bin
    (省略)
  drwxr-xr-x   2 root     root            0 Dec  1 19:41 usr/bin
  lrwxrwxrwx   1 root     root            4 Dec  1 19:40 usr/bin/awk -> gawk
  -rwxr-xr-x   1 root     root       964536 Dec  1 19:41 usr/bin/bash
  -rwxr-xr-x   1 root     root        54080 Dec  1 19:41 usr/bin/cat
  -rwxr-xr-x   1 root     root       155176 Dec  1 19:41 usr/bin/cp
  -rwxr-xr-x   1 root     root        49680 Dec  1 19:41 usr/bin/dmesg
  -rwxr-xr-x   1 root     root         2714 Oct  1  2020 usr/bin/dracut-cmdline
  -rwxr-xr-x   1 root     root          422 Oct  1  2020 usr/bin/dracut-cmdline-ask
  -rwxr-xr-x   1 root     root         1342 Oct  1  2020 usr/bin/dracut-emergency
  -rwxr-xr-x   1 root     root         2223 Oct  1  2020 usr/bin/dracut-initqueue
  -rwxr-xr-x   1 root     root         1170 Sep 12  2013 usr/bin/dracut-mount
  -rwxr-xr-x   1 root     root          622 Oct  1  2020 usr/bin/dracut-pre-mount
  -rwxr-xr-x   1 root     root         1175 Oct  1  2020 usr/bin/dracut-pre-pivot
  -rwxr-xr-x   1 root     root          588 Oct  1  2020 usr/bin/dracut-pre-trigger
  -rwxr-xr-x   1 root     root         1523 Sep 12  2013 usr/bin/dracut-pre-udev
  -rwxr-xr-x   1 root     root        33088 Dec  1 19:41 usr/bin/echo
  -rwxr-xr-x   1 root     root        59776 Dec  1 19:41 usr/bin/findmnt
  -rwxr-xr-x   1 root     root        24448 Dec  1 19:41 usr/bin/flock
  -rwxr-xr-x   1 root     root       428584 Dec  1 19:41 usr/bin/gawk
  -rwxr-xr-x   1 root     root       159024 Dec  1 19:41 usr/bin/grep
  -rwxr-xr-x   1 root     root       100800 Dec  1 19:41 usr/bin/gzip
  -rwxr-xr-x   1 root     root       550808 Dec  1 19:41 usr/bin/journalctl
  -rwxr-xr-x   1 root     root        11504 Dec  1 19:41 usr/bin/kbd_mode
  -rwxr-xr-x   1 root     root       146680 Dec  1 19:41 usr/bin/kmod
  -rwxr-xr-x   1 root     root       158240 Dec  1 19:41 usr/bin/less
  -rwxr-xr-x   1 root     root        58592 Dec  1 19:41 usr/bin/ln
  -rwxr-xr-x   1 root     root       113184 Dec  1 19:41 usr/bin/loadkeys
  lrwxrwxrwx   1 root     root            4 Dec  1 19:41 usr/bin/loginctl -> true
  -rwxr-xr-x   1 root     root       117608 Dec  1 19:41 usr/bin/ls
  -rwxr-xr-x   1 root     root        79768 Dec  1 19:41 usr/bin/mkdir
  -rwxr-xr-x   1 root     root        63056 Dec  1 19:41 usr/bin/mkfifo
  -rwxr-xr-x   1 root     root        67184 Dec  1 19:41 usr/bin/mknod
  -rwsr-xr-x   1 root     root        44264 Dec  1 19:41 usr/bin/mount
  -rwxr-xr-x   1 root     root       130360 Dec  1 19:41 usr/bin/mv
  -rwxr-xr-x   1 root     root        66176 Dec  1 19:41 usr/bin/ping
  -rwxr-xr-x   1 root     root        40720 Dec  1 19:41 usr/bin/plymouth
  -rwxr-xr-x   1 root     root       100112 Dec  1 19:41 usr/bin/ps
  -rwxr-xr-x   1 root     root        41800 Dec  1 19:41 usr/bin/readlink
  -rwxr-xr-x   1 root     root        62872 Dec  1 19:41 usr/bin/rm
  -rwxr-xr-x   1 root     root        76072 Dec  1 19:41 usr/bin/sed
  -rwxr-xr-x   1 root     root        41432 Dec  1 19:41 usr/bin/setfont
  -rwxr-xr-x   1 root     root        11496 Dec  1 19:41 usr/bin/setsid
  lrwxrwxrwx   1 root     root            4 Dec  1 19:40 usr/bin/sh -> bash
  -rwxr-xr-x   1 root     root        33128 Dec  1 19:41 usr/bin/sleep
  -rwxr-xr-x   1 root     root        79040 Dec  1 19:41 usr/bin/stat
  -rwxr-xr-x   1 root     root        70256 Dec  1 19:41 usr/bin/stty
  -rwxr-xr-x   1 root     root       721744 Dec  1 19:41 usr/bin/systemctl
  -rwxr-xr-x   1 root     root       334120 Dec  1 19:41 usr/bin/systemd-cgls
  -rwxr-xr-x   1 root     root        49344 Dec  1 19:41 usr/bin/systemd-escape
  -rwxr-xr-x   1 root     root       396320 Dec  1 19:41 usr/bin/systemd-run
  -rwxr-xr-x   1 root     root       145536 Dec  1 19:41 usr/bin/systemd-tmpfiles
  -rwxr-xr-x   1 root     root       158808 Dec  1 19:41 usr/bin/teamd
  -rwxr-xr-x   1 root     root        29672 Dec  1 19:41 usr/bin/teamdctl
  -rwxr-xr-x   1 root     root        19552 Dec  1 19:41 usr/bin/teamnl
  -rwxr-xr-x   1 root     root        45680 Dec  1 19:41 usr/bin/tr
  -rwxr-xr-x   1 root     root        28936 Dec  1 19:41 usr/bin/true
  -rwxr-xr-x   1 root     root       424216 Dec  1 19:41 usr/bin/udevadm
  -rwsr-xr-x   1 root     root        31984 Dec  1 19:41 usr/bin/umount
  -rwxr-xr-x   1 root     root        33080 Dec  1 19:41 usr/bin/uname
  -rwxr-xr-x   1 root     root       928056 Dec  1 19:41 usr/bin/vi
    (省略)
  drwxr-xr-x   2 root     root            0 Dec  1 19:40 var
  lrwxrwxrwx   1 root     root           11 Dec  1 19:40 var/lock -> ../run/lock
  lrwxrwxrwx   1 root     root            6 Dec  1 19:40 var/run -> ../run
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[16]
  初期RAMディスク - 2 (作成)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 初期RAMディスクの役割
    1. ファームウェア(BIOS)がマスターブートレコード(MBR)からブートローダー起動
    2. ブートローダー(GRUB)がカーネル起動
    3. カーネルがメモリに初期RAMディスクを展開
    4. 初期RAMディスク(ルートファイルシステムをマウントするためのコマンド群を持つ)がルートファイルシステムのマウントを行う
    5. 初期RAMディスクはルートファイルシステムに置換される
    6. プロセス(systemd)が起動する
  
  ## 作業内容
    初期RAMディスクをコマンド(mkinitrd)で作成する
    初期RAMディスクを展開する
    展開された初期RAMディスクのコマンド群を確認する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ mkdir RAM2
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM2
  vm12$ sudo mkinitrd BBB.img $(uname -r) (初期RAMディスクをコマンドで作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 5分程かかる
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM2
  vm12$ sudo lsinitrd BBB.img (初期RAMディスクの内容を確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 前記録(15)を参照
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM2
  vm12$ sudo zcat BBB.img | cpio -i (初期RAMディスクを展開)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> コマンド(mknod)部分でエラー出力されたが続行
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM2
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-------.  1 root   root    40M 12月  6 10:14 BBB.img         // 初期RAMディスク
  lrwxrwxrwx.  1 makoto makoto    7 12月  6 10:16 bin -> usr/bin  // コマンド群
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 dev
  drwxr-xr-x. 12 makoto makoto 4.0K 12月  6 10:16 etc
  lrwxrwxrwx.  1 makoto makoto   23 12月  6 10:16 init -> usr/lib/systemd/systemd
  lrwxrwxrwx.  1 makoto makoto    7 12月  6 10:16 lib -> usr/lib
  lrwxrwxrwx.  1 makoto makoto    9 12月  6 10:16 lib64 -> usr/lib64
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 proc
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 root
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 run
  lrwxrwxrwx.  1 makoto makoto    8 12月  6 10:16 sbin -> usr/sbin
  -rwxr-xr-x.  1 makoto makoto 3.1K 12月  6 10:16 shutdown
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 sys
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 sysroot
  drwxr-xr-x.  2 makoto makoto    6 12月  6 10:16 tmp
  drwxr-xr-x.  7 makoto makoto   66 12月  6 10:16 usr
  drwxr-xr-x.  2 makoto makoto   29 12月  6 10:16 var
  --------------------------------------------------
  
  vm12$ cd $HOME/RAM2/bin
  vm12$ ls -lh (展開された初期RAMディスクのコマンド群を確認)
  
  コマンドの実行結果
  --------------------------------------------------
  lrwxrwxrwx. 1 makoto makoto    4 12月  6 10:16 awk -> gawk
  -rwxr-xr-x. 1 makoto makoto 942K 12月  6 10:16 bash
  -rwxr-xr-x. 1 makoto makoto  53K 12月  6 10:16 cat
  -rwxr-xr-x. 1 makoto makoto 152K 12月  6 10:16 cp
  -rwxr-xr-x. 1 makoto makoto  49K 12月  6 10:16 dmesg
  -rwxr-xr-x. 1 makoto makoto 2.7K 12月  6 10:16 dracut-cmdline
  -rwxr-xr-x. 1 makoto makoto  422 12月  6 10:16 dracut-cmdline-ask
  -rwxr-xr-x. 1 makoto makoto 1.4K 12月  6 10:16 dracut-emergency
  -rwxr-xr-x. 1 makoto makoto 2.2K 12月  6 10:16 dracut-initqueue
  -rwxr-xr-x. 1 makoto makoto 1.2K 12月  6 10:16 dracut-mount
  -rwxr-xr-x. 1 makoto makoto  622 12月  6 10:16 dracut-pre-mount
  -rwxr-xr-x. 1 makoto makoto 1.2K 12月  6 10:16 dracut-pre-pivot
  -rwxr-xr-x. 1 makoto makoto  588 12月  6 10:16 dracut-pre-trigger
  -rwxr-xr-x. 1 makoto makoto 1.5K 12月  6 10:16 dracut-pre-udev
  -rwxr-xr-x. 1 makoto makoto  33K 12月  6 10:16 echo
  -rwxr-xr-x. 1 makoto makoto  59K 12月  6 10:16 findmnt
  -rwxr-xr-x. 1 makoto makoto  24K 12月  6 10:16 flock
  -rwxr-xr-x. 1 makoto makoto 419K 12月  6 10:16 gawk
  -rwxr-xr-x. 1 makoto makoto 156K 12月  6 10:16 grep
  -rwxr-xr-x. 1 makoto makoto  99K 12月  6 10:16 gzip
  -rwxr-xr-x. 1 makoto makoto 538K 12月  6 10:16 journalctl
  -rwxr-xr-x. 1 makoto makoto  12K 12月  6 10:16 kbd_mode
  -rwxr-xr-x. 1 makoto makoto 144K 12月  6 10:16 kmod
  -rwxr-xr-x. 1 makoto makoto 155K 12月  6 10:16 less
  -rwxr-xr-x. 1 makoto makoto  58K 12月  6 10:16 ln
  -rwxr-xr-x. 1 makoto makoto 111K 12月  6 10:16 loadkeys
  lrwxrwxrwx. 1 makoto makoto    4 12月  6 10:16 loginctl -> true
  -rwxr-xr-x. 1 makoto makoto 115K 12月  6 10:16 ls
  -rwxr-xr-x. 1 makoto makoto  78K 12月  6 10:16 mkdir
  -rwxr-xr-x. 1 makoto makoto  62K 12月  6 10:16 mkfifo
  -rwxr-xr-x. 1 makoto makoto  66K 12月  6 10:16 mknod
  -rwsr-xr-x. 1 makoto makoto  44K 12月  6 10:16 mount
  -rwxr-xr-x. 1 makoto makoto 128K 12月  6 10:16 mv
  -rwxr-xr-x. 1 makoto makoto  65K 12月  6 10:16 ping
  -rwxr-xr-x. 1 makoto makoto  40K 12月  6 10:16 plymouth
  -rwxr-xr-x. 1 makoto makoto  98K 12月  6 10:16 ps
  -rwxr-xr-x. 1 makoto makoto  41K 12月  6 10:16 readlink
  -rwxr-xr-x. 1 makoto makoto  62K 12月  6 10:16 rm
  -rwxr-xr-x. 1 makoto makoto  75K 12月  6 10:16 sed
  -rwxr-xr-x. 1 makoto makoto  41K 12月  6 10:16 setfont
  -rwxr-xr-x. 1 makoto makoto  12K 12月  6 10:16 setsid
  lrwxrwxrwx. 1 makoto makoto    4 12月  6 10:16 sh -> bash
  -rwxr-xr-x. 1 makoto makoto  33K 12月  6 10:16 sleep
  -rwxr-xr-x. 1 makoto makoto  78K 12月  6 10:16 stat
  -rwxr-xr-x. 1 makoto makoto  69K 12月  6 10:16 stty
  -rwxr-xr-x. 1 makoto makoto 705K 12月  6 10:16 systemctl
  -rwxr-xr-x. 1 makoto makoto 327K 12月  6 10:16 systemd-cgls
  -rwxr-xr-x. 1 makoto makoto  49K 12月  6 10:16 systemd-escape
  -rwxr-xr-x. 1 makoto makoto 388K 12月  6 10:16 systemd-run
  -rwxr-xr-x. 1 makoto makoto 143K 12月  6 10:16 systemd-tmpfiles
  -rwxr-xr-x. 1 makoto makoto 156K 12月  6 10:16 teamd
  -rwxr-xr-x. 1 makoto makoto  29K 12月  6 10:16 teamdctl
  -rwxr-xr-x. 1 makoto makoto  20K 12月  6 10:16 teamnl
  -rwxr-xr-x. 1 makoto makoto  45K 12月  6 10:16 tr
  -rwxr-xr-x. 1 makoto makoto  29K 12月  6 10:16 true
  -rwxr-xr-x. 1 makoto makoto 415K 12月  6 10:16 udevadm
  -rwsr-xr-x. 1 makoto makoto  32K 12月  6 10:16 umount
  -rwxr-xr-x. 1 makoto makoto  33K 12月  6 10:16 uname
  -rwxr-xr-x. 1 makoto makoto 907K 12月  6 10:16 vi
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[17]
  仮想ファイルシステム
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    仮想ファイルシステム(/proc)配下の主要ファイルを確認する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ ls -lh /proc | grep -E '^-' (仮想ファイルシステム配下のファイルを一覧表示)
  
  コマンドの実行結果
  --------------------------------------------------
  -r--r--r--.  1 root    root       0 12月  6 10:56 buddyinfo      // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 cgroups        // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 cmdline        // システム起動時のカーネル引数
  -r--r--r--.  1 root    root       0 12月  6 10:56 consoles       // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 cpuinfo        // CPU情報
  -r--r--r--.  1 root    root       0 12月  6 10:56 crypto         // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 devices        // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 diskstats      // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 dma            // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 execdomains    // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 fb             // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 filesystems    // ファイルシステム情報
  -r--r--r--.  1 root    root       0 12月  6 10:56 interrupts     // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 iomem          // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 ioports        // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 kallsyms       // 不明
  -r--------.  1 root    root    128T 12月  6 10:56 kcore          // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 key-users      // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 keys           // 不明
  -r--------.  1 root    root       0 12月  6 10:56 kmsg           // カーネルログ
  -r--------.  1 root    root       0 12月  6 10:56 kpagecgroup    // 不明
  -r--------.  1 root    root       0 12月  6 10:56 kpagecount     // 不明
  -r--------.  1 root    root       0 12月  6 10:56 kpageflags     // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 loadavg        // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 locks          // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 mdstat         // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 meminfo        // メモリ情報
  -r--r--r--.  1 root    root       0 12月  6 10:56 misc           // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 modules        // カーネルモジュール一覧
  -rw-r--r--.  1 root    root       0 12月  6 10:56 mtrr           // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 pagetypeinfo   // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 partitions     // パーティション情報
  -r--r--r--.  1 root    root       0 12月  6 10:56 sched_debug    // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 schedstat      // 不明
  -r--------.  1 root    root       0 12月  6 10:56 slabinfo       // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 softirqs       // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 stat           // 不明
  -r--r--r--.  1 root    root       0 12月  6 09:11 swaps          // 使用中のスワップ領域
  --w-------.  1 root    root       0 12月  6 10:56 sysrq-trigger  // 不明
  -r--------.  1 root    root       0 12月  6 10:56 timer_list     // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 uptime         // システム起動からの経過時間
  -r--r--r--.  1 root    root       0 12月  6 10:56 version        // バージョン情報
  -r--------.  1 root    root       0 12月  6 10:56 vmallocinfo    // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 vmstat         // 不明
  -r--r--r--.  1 root    root       0 12月  6 10:56 zoneinfo       // 不明
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/cmdline (システム起動時のカーネル引数)
  
  コマンドの実行結果
  --------------------------------------------------
  BOOT_IMAGE=/vmlinuz-4.15.3         // カーネルイメージ(/boot/vmlinuz-4.15.3)
  root=/dev/mapper/centos_vm11-root  // 起動デバイス
  ro                                 // 読取専用
  crashkernel=auto                   // 不明
  rd.lvm.lv=centos_vm11/root         // 不明
  rd.lvm.lv=centos_vm11/swap         // 不明
  console=ttyS0,115200n8             // 仮想マシン作成時にブートローダーに指定したコンソール接続のためのパラメータ
  LANG=ja_JP.UTF-8                   // 言語・国・文字コード
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/cpuinfo (CPU情報)
  
  コマンドの実行結果
  --------------------------------------------------
  processor        : 0                                   // CPUのID
  vendor_id        : GenuineIntel                        // ベンダーID
  cpu family       : 6                                   // 不明
  model            : 26                                  // 不明
  model name       : Intel Core i7 9xx (Nehalem Core i7, IBRS update)
  stepping         : 3                                   // 不明
  microcode        : 0x1                                 // 不明
  cpu MHz          : 2394.414                            // 不明
  cache size       : 4096 KB                             // 不明
  physical id      : 0                                   // 不明
  siblings         : 1                                   // 不明
  core id          : 0                                   // 不明
  cpu cores        : 1                                   // CPU内のコア数
  apicid           : 0                                   // 不明
  initial apicid   : 0                                   // 不明
  fpu              : yes                                 // 不明
  fpu_exception    : yes                                 // 不明
  cpuid level      : 11                                  // 不明
  wp               : yes                                 // 不明
  flags            : fpu de pse tsc msr pae ..           // vmx -> CPUがKVMに対応している
  bugs             : cpu_meltdown spectre_v1 spectre_v2  // 不明
  bogomips         : 4788.82                             // 不明
  clflush size     : 64                                  // 不明
  cache_alignment  : 64                                  // 不明
  address sizes    : 36 bits physical, 48 bits virtual   // 不明
  power management :                                     // 不明
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/filesystems (ファイルシステム情報)
  
  コマンドの実行結果
  --------------------------------------------------
  nodev  sysfs       // 使用デバイスなし
  nodev  rootfs      // 使用デバイスなし
  nodev  ramfs       // 使用デバイスなし
  nodev  bdev        // 使用デバイスなし
  nodev  proc        // 使用デバイスなし
  nodev  cpuset      // 使用デバイスなし
  nodev  cgroup      // 使用デバイスなし
  nodev  cgroup2     // 使用デバイスなし
  nodev  tmpfs       // 使用デバイスなし
  nodev  devtmpfs    // 使用デバイスなし
  nodev  configfs    // 使用デバイスなし
  nodev  debugfs     // 使用デバイスなし
  nodev  tracefs     // 使用デバイスなし
  nodev  securityfs  // 使用デバイスなし
  nodev  sockfs      // 使用デバイスなし
  nodev  dax         // 使用デバイスなし
  nodev  bpf         // 使用デバイスなし
  nodev  pipefs      // 使用デバイスなし
  nodev  hugetlbfs   // 使用デバイスなし
  nodev  devpts      // 使用デバイスなし
  nodev  autofs      // 使用デバイスなし
  nodev  pstore      // 使用デバイスなし
  nodev  mqueue      // 使用デバイスなし
  nodev  selinuxfs   // 使用デバイスなし
         xfs         // ディスクで使用しているファイルシステムはxfsのみ
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/swaps (使用中のスワップ領域)
  
  コマンドの実行結果
  --------------------------------------------------
  Filename    Type         Size        Used     Priority
  /dev/dm-1   partition    2097148     268      -2
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/version (バージョン情報)
  
  コマンドの実行結果
  --------------------------------------------------
  Linux version 4.15.3 (root@vm12) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC))
  #1 SMP Sat Dec 4 10:54:37 JST 2021  // 不明
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[18]
  デバイス(PCI)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    カーネルが認識するデバイス(PCI)をコマンド(lspci)で調査する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo yum -y install pciutils (パッケージ追加)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lspci (デバイス(PCI)をコマンドで調査)
  
  コマンドの実行結果
  --------------------------------------------------
  00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)
  00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]
  00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]
  00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)
  00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device
  00:04.0 USB controller: Intel Corporation 82801I (ICH9 Family) USB UHCI Controller #1 (rev 03)
  00:04.1 USB controller: Intel Corporation 82801I (ICH9 Family) USB UHCI Controller #2 (rev 03)
  00:04.2 USB controller: Intel Corporation 82801I (ICH9 Family) USB UHCI Controller #3 (rev 03)
  00:04.7 USB controller: Intel Corporation 82801I (ICH9 Family) USB2 EHCI Controller #1 (rev 03)
  00:05.0 Communication controller: Red Hat, Inc. Virtio console
  00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device
  00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon
  00:08.0 Unclassified device [00ff]: Red Hat, Inc. Virtio RNG
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lspci -s 00:01 -v -t (PCIバス(00)、スロット(01)、詳細情報、ツリー状で表示)
  
  コマンドの実行結果
  --------------------------------------------------
  -[0000:00]-+-01.0  Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]
             +-01.1  Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]
             \-01.3  Intel Corporation 82371AB/EB/MB PIIX4 ACPI
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[19]
  デバイス(USB)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    カーネルが認識するデバイス(USB)をコマンド(lsusb)で調査する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo yum -y install usbutils (パッケージ追加)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lsusb (デバイス(USB)をコマンドで調査)
  
  コマンドの実行結果
  --------------------------------------------------
  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
  Bus 004 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
  Bus 003 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
  Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lspci -s 001:001 (USBバス(001)、デバイス(001)で表示)
  
  コマンドの実行結果
  --------------------------------------------------
  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[20]
  デバイスファイル
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    デバイスファイルの情報を追跡してみる
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ ls -lh /dev | grep -E '^b' (ブロック型デバイスファイル)
  
  コマンドの実行結果
  --------------------------------------------------
  brw-rw----. 1 root   disk    253,   0 12月  6 09:11 dm-0
  brw-rw----. 1 root   disk    253,   1 12月  6 09:11 dm-1
  brw-rw----. 1 root   cdrom    11,   0 12月  6 09:11 sr0
  brw-rw----. 1 root   disk    252,   0 12月  6 09:11 vda
  brw-rw----. 1 root   disk    252,   1 12月  6 09:11 vda1
  brw-rw----. 1 root   disk    252,   2 12月  6 09:11 vda2
  
  // 252 : メジャー番号
  // 0   : マイナー番号
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat /proc/devices | grep -E '252|253' (メジャー番号252,253が何を意味するか調査)
  
  コマンドの実行結果
  --------------------------------------------------
  252 dax            // 不明 -> おそらく関係ない
  253 tpm            // 不明 -> おそらく関係ない
  252 virtblk        // 仮想ブロック(おそらく仮想マシン内の仮想ディスクを指す)
  253 device-mapper  // 不明
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[21]
  ループバックデバイス
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 作業内容
    ディスクイメージからループバックデバイス作成
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ dd if=/dev/zero of=loop0.img bs=1M count=10 (ディスクイメージ作成)
  
  コマンドの実行結果
  --------------------------------------------------
  10+0 レコード入力
  10+0 レコード出力
  10485760 バイト (10 MB) コピーされました、 0.0541071 秒、 194 MB/秒
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo losetup /dev/loop0 loop0.img (ディスクイメージからループバックデバイス作成)
  
  コマンドの実行結果
  --------------------------------------------------
  [28369.495203] loop: module loaded
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ losetup -l (ループバックデバイス確認)
  
  コマンドの実行結果
  --------------------------------------------------
  NAME       SIZELIMIT  OFFSET  AUTOCLEAR  RO  BACK-FILE
  /dev/loop0         0       0          0   0  /home/makoto/loop0.img
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo mkfs.ext4 /dev/loop0 (ループバックデバイスにファイルシステム構築)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> ブロック割当のメッセージが多数出力されるが成功
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo mount -t ext4 /dev/loop0 /mnt (ループバックデバイスをマウント)
  
  コマンドの実行結果
  --------------------------------------------------
  [28616.334079] EXT4-fs (loop0): mounted filesystem with ordered data mode. Opts: (null)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ df -lh (ループバックデバイスをブロックデバイスとして確認1)
  
  コマンドの実行結果
  --------------------------------------------------
  ファイルシス                       サイズ   使用   残り   使用% マウント位置
  devtmpfs                       466M     0  466M    0% /dev
  tmpfs                          489M     0  489M    0% /dev/shm
  tmpfs                          489M  6.6M  482M    2% /run
  tmpfs                          489M     0  489M    0% /sys/fs/cgroup
  /dev/mapper/centos_vm11-root    17G  5.4G   12G   32% /
  /dev/vda1                     1014M  188M  827M   19% /boot
  tmpfs                           98M     0   98M    0% /run/user/1000
  /dev/loop0                     8.7M  172K  7.9M    3% /mnt (ループバックデバイス)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ lsblk (ループバックデバイスをブロックデバイスとして確認2)
  
  コマンドの実行結果
  --------------------------------------------------
  NAME                 MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
  sr0                   11:0    1 1024M  0 rom  
  loop0                  7:0    0   10M  0 loop /mnt (ループバックデバイス)
  vda                  252:0    0   20G  0 disk 
  ├─vda2               252:2    0   19G  0 part 
  │ ├─centos_vm11-swap 253:1    0    2G  0 lvm  [SWAP]
  │ └─centos_vm11-root 253:0    0   17G  0 lvm  /
  └─vda1               252:1    0    1G  0 part /boot
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo umount /mnt (ループバックデバイスをアンマウント)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo losetup -D (ループバックデバイスを一括削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ losetup -l (ループバックデバイス確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ rm -f loop0.img (ディスクイメージ削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[22]
  動的デバイス管理 - 1 (ルール記述)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 動的デバイス管理
    1. カーネルがデバイスの追加または削除を認識
    2. カーネルがパス(/sys)配下にデバイス情報を作成
    3. カーネルがプロセス(udevd)に通知(uevent)
    4. プロセス(udevd)はパス(/sys)配下とルール(後述)を参照してデバイスファイルを作成
  
  ## 作業内容
    ループバックデバイス検出時にルール通りのコマンドが実行されるか確認する
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ systemctl is-active systemd-udevd (プロセスの稼働状況を確認)
  
  コマンドの実行結果
  --------------------------------------------------
  active -> プロセス(udevd)の実体はsystemd-udevd
  --------------------------------------------------
  
  vm12$ cd /etc/udev/rules.d
  vm12$ sudo vi 10-loopback.rules (ルール作成)
  
  コマンドの実行結果
  --------------------------------------------------
  # ループバックデバイス検出時にコマンド実行
  KERNEL=="loop*", RUN="/bin/logger %k %p"
  
  // %k : デバイス名
  // %p : デバイスファイル(絶対パス)
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ dd if=/dev/zero of=loop0.img bs=1M count=10 (ディスクイメージ作成)
  
  コマンドの実行結果
  --------------------------------------------------
  10+0 レコード入力
  10+0 レコード出力
  10485760 バイト (10 MB) コピーされました、 0.0378319 秒、 277 MB/秒
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo losetup /dev/loop0 loop0.img (ディスクイメージからループバックデバイス作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ losetup -l (ループバックデバイス確認)
  
  コマンドの実行結果
  --------------------------------------------------
  NAME       SIZELIMIT  OFFSET  AUTOCLEAR  RO  BACK-FILE
  /dev/loop0         0       0          0   0  /home/makoto/loop0.img
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ journalctl --no-pager | grep loop0 (ジャーナルを確認)
  
  コマンドの実行結果
  --------------------------------------------------
  12月 06 18:36:12 vm12 root[11478]: loop0 /devices/virtual/block/loop0
  12月 06 18:36:12 vm12 root[11480]: loop0 /devices/virtual/block/loop0
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo losetup -D (ループバックデバイスを一括削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ losetup -l (ループバックデバイス確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ rm -f loop0.img (ディスクイメージ削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[23]
  動的デバイス管理 - 2 (udevadm info)
  
[内容]
  ## 仮想マシン
    HOST : vm12
    IPv4 : 192.168.122.12
    GW   : 192.168.122.1
    DNS  : 192.168.122.1
  
  ## 動的デバイス管理
    1. カーネルがデバイスの追加または削除を認識
    2. カーネルがパス(/sys)配下にデバイス情報を作成
    3. カーネルがプロセス(udevd)に通知(uevent)
    4. プロセス(udevd)はパス(/sys)配下とルール(後述)を参照してデバイスファイルを作成
  
  ## 作業内容
    ループバックデバイス検出をコマンド(udevadm info)でモニターする
  
[確認]
  $ cd $HOME
  $ sudo virsh start vm12 --console
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 仮想マシンの起動
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ systemctl is-active systemd-udevd (プロセスの稼働状況を確認)
  
  コマンドの実行結果
  --------------------------------------------------
  active -> プロセス(udevd)の実体はsystemd-udevd
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ dd if=/dev/zero of=loop1.img bs=1M count=10 (ディスクイメージ作成)
  
  コマンドの実行結果
  --------------------------------------------------
  10+0 レコード入力
  10+0 レコード出力
  10485760 バイト (10 MB) コピーされました、 0.0378319 秒、 277 MB/秒
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo losetup /dev/loop1 loop1.img (ディスクイメージからループバックデバイス作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ losetup -l (ループバックデバイス確認)
  
  コマンドの実行結果
  --------------------------------------------------
  NAME       SIZELIMIT  OFFSET  AUTOCLEAR  RO  BACK-FILE
  /dev/loop1         0       0          0   0  /home/makoto/loop1.img
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ udevadm info -n /dev/loop1 (デバイス名指定)
  
  コマンドの実行結果
  --------------------------------------------------
  P: /devices/virtual/block/loop1          // デバイス名(sys)
  N: loop1                                 // 名前
  E: DEVNAME=/dev/loop1                    // デバイス名
  E: DEVPATH=/devices/virtual/block/loop1  // プロパティ
  E: DEVTYPE=disk                          // プロパティ
  E: MAJOR=7                               // プロパティ
  E: MINOR=1                               // プロパティ
  E: SUBSYSTEM=block                       // プロパティ
  E: TAGS=:systemd:                        // プロパティ
  E: USEC_INITIALIZED=36141906492          // プロパティ
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ udevadm info -p /devices/virtual/block/loop1 (デバイス名(sysfs)指定)
  
  コマンドの実行結果
  --------------------------------------------------
  P: /devices/virtual/block/loop1          // デバイス名(sys)
  N: loop1                                 // 名前
  E: DEVNAME=/dev/loop1                    // デバイス名
  E: DEVPATH=/devices/virtual/block/loop1  // プロパティ
  E: DEVTYPE=disk                          // プロパティ
  E: MAJOR=7                               // プロパティ
  E: MINOR=1                               // プロパティ
  E: SUBSYSTEM=block                       // プロパティ
  E: TAGS=:systemd:                        // プロパティ
  E: USEC_INITIALIZED=36141906492          // プロパティ
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ udevadm info -n /dev/loop1 -q name (デバイス名からの問合せ結果から名前のみ抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  loop1
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ udevadm info -n /dev/loop1 -q property (デバイス名からの問合せ結果からプロパティ表示)
  
  コマンドの実行結果
  --------------------------------------------------
  E: DEVNAME=/dev/loop1                    // デバイス名
  E: DEVPATH=/devices/virtual/block/loop1  // プロパティ
  E: DEVTYPE=disk                          // プロパティ
  E: MAJOR=7                               // プロパティ
  E: MINOR=1                               // プロパティ
  E: SUBSYSTEM=block                       // プロパティ
  E: TAGS=:systemd:                        // プロパティ
  E: USEC_INITIALIZED=36141906492          // プロパティ
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ udevadm info -n /dev/loop1 -q all (デバイス名からの問合せ結果から全情報表示)
  
  コマンドの実行結果
  --------------------------------------------------
  P: /devices/virtual/block/loop1          // デバイス名(sys)
  N: loop1                                 // 名前
  E: DEVNAME=/dev/loop1                    // デバイス名
  E: DEVPATH=/devices/virtual/block/loop1  // プロパティ
  E: DEVTYPE=disk                          // プロパティ
  E: MAJOR=7                               // プロパティ
  E: MINOR=1                               // プロパティ
  E: SUBSYSTEM=block                       // プロパティ
  E: TAGS=:systemd:                        // プロパティ
  E: USEC_INITIALIZED=36141906492          // プロパティ
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ sudo losetup -D (ループバックデバイスを一括削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ losetup -l (ループバックデバイス確認)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ rm -f loop1.img (ディスクイメージ削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================

