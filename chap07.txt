================================================================================
[01] ソースの展開 - 01 (tar-gzip)
[02] ソースの展開 - 02 (tar-bzip2)
[03] ソースの展開 - 03 (tar-xz)
[04] ソースの展開 - 04 (patch)
[05] コンパイルとインストール
[06] ローカルでのバックアップ - 01 (tar)
[07] ローカルでのバックアップ - 02 (cpio)
================================================================================
[01]
  ソースの展開 - 01 (tar-gzip)
  
[内容]
  ## ファイル(source)の展開

  ==========================================================
                          source
  ==========================================================
            |                                    |
            + tar -cf source.tar source          |
            |                                    |
  ======================                         |
       source.tar                                + tar zcf source.tar.gz source
  ======================                         |
            |                                    |
            + gzip source.tar                    |
            |                                    |
  ==========================================================
                      source.tar.gz
  ==========================================================
            |                                    |
            + gunzip source.tar.gz               |
            |  (gzip -d source.tar.gz)           |
  ======================                         |
       source.tar                                + tar zxf source.tar.gz
  ======================                         |
            |                                    |
            + tar xf source.tar                  |
            |                                    |
  ==========================================================
                          source
  ==========================================================
  
[確認]
  実機での確認なし
  
================================================================================
[02]
  ソースの展開 - 02 (tar-bzip2)
  
[内容]
  ## ファイル(source)の展開

  ==========================================================
                          source
  ==========================================================
            |                                    |
            + tar -cf source.tar source          |
            |                                    |
  ======================                         |
       source.tar                                + tar jcf source.tar.bz2 source
  ======================                         |
            |                                    |
            + bzip2 source.tar                   |
            |                                    |
  ==========================================================
                      source.tar.bz2
  ==========================================================
            |                                    |
            + bunzip2 source.tar.bz2             |
            |  (bzip2 -d source.tar.bz2)         |
  ======================                         |
       source.tar                                + tar jxf source.tar.bz2
  ======================                         |
            |                                    |
            + tar xf source.tar                  |
            |                                    |
  ==========================================================
                          source
  ==========================================================
  
[確認]
  実機での確認なし
  
================================================================================
[03]
  ソースの展開 - 03 (tar-xz)
  
[内容]
  ## ファイル(source)の展開
  
  ==========================================================
                          source
  ==========================================================
            |                                    |
            + tar -cf source.tar source          |
            |                                    |
  ======================                         |
       source.tar                                + tar Jcf source.tar.xz source
  ======================                         |
            |                                    |
            + xz source.tar                      |
            |                                    |
  ==========================================================
                      source.tar.xz
  ==========================================================
            |                                    |
            + unxz source.tar.xz                 |
            |  (xz -d source.tar.xz)             |
  ======================                         |
       source.tar                                + tar Jxf source.tar.xz
  ======================                         |
            |                                    |
            + tar xf source.tar                  |
            |                                    |
  ==========================================================
                          source
  ==========================================================
  
[確認]
  実機での確認なし
  
================================================================================
[04]
  ソースの展開 - 04 (patch)
  
[内容]
  ## 作業内容
    ソースの修正部分(パッチ)の反映をコマンド(patch)で行う
  
  ## 使用マシン
    HOST : vm12
    IPV4 : 192.168.122.12
    MEMO : 仮想マシン(サーバー用途)
  
  ## コマンド(patch)
    patch -R           // 処理内容を取り消して元に戻す
    patch -p0 XX < YY  // ファイル(XX)にパッチ(YY=patch/AAA)の差分を適用、パスを修正しない   -> patch/AAA
    patch -p1 XX < YY  // ファイル(XX)にパッチ(YY=patch/AAA)の差分を適用、最初の'/'まで削除  -> AAA
    
[確認]
  vm12$ cd $HOME/HELLO -> 先にディレクトリ作成
  vm12$ vi hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO/patch -> 先にディレクトリ作成
  vm12$ cp -p ../hello* .(カレントディレクトリ)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO/patch
  vm12$ vi hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言(追加)
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO/patch
  vm12$ vi hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  void Hello2(void) { printf("Hello2\n"); }  // 関数実装(追加)
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ diff -u hello.h patch/hello.h > patch/patch01 (パッチファイル作成)
  vm12$ diff -u hello.c patch/hello.c > patch/patch02 (パッチファイル作成)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat patch/patch01 (パッチファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  --- hello.h	2022-01-04 18:38:51.842473496 +0900
  +++ patch/hello.h	2022-01-04 18:45:40.066991609 +0900  // 注意 : p0 = patch/hello.h, p1 = hello.h
  @@ -1,5 +1,6 @@
   #ifndef HELLO_H_
   
   void Hello1(void);  // 関数プロトタイプ宣言
  +void Hello2(void);  // 関数プロトタイプ宣言
   
   #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat patch/patch02 (パッチファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  --- hello.c	2022-01-04 18:27:59.875437267 +0900
  +++ patch/hello.c	2022-01-04 18:46:06.446831227 +0900  // 注意 : p0 = patch/hello.c, p1 = hello.c
  @@ -2,3 +2,4 @@
   #include "hello.h"
   
   void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  +void Hello2(void) { printf("Hello2\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO/patch
  vm12$ rm -f hello.h hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ patch -p0 hello.h < patch/patch01 (パッチ適用)
  
  コマンドの実行結果
  --------------------------------------------------
  patching file hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ patch -p0 hello.c < patch/patch02 (パッチ適用)
  
  コマンドの実行結果
  --------------------------------------------------
  patching file hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  void Hello2(void) { printf("Hello2\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ patch -R -p0 hello.h < patch/patch01 (パッチ適用の取消)
  
  コマンドの実行結果
  --------------------------------------------------
  patching file hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ patch -R -p0 hello.c < patch/patch02 (パッチ適用の取消)
  
  コマンドの実行結果
  --------------------------------------------------
  patching file hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cp -p patch/patch[0-1] .(カレントディレクトリ)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ ls -lh
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto 157  1月  4 19:03 hello.c
  -rw-rw-r--. 1 makoto makoto 134  1月  4 19:03 hello.h
  drwxrwxr-x. 2 makoto makoto  36  1月  4 18:49 patch
  -rw-rw-r--. 1 makoto makoto 258  1月  4 19:02 patch01 (コピーしてきたパッチファイル)
  -rw-rw-r--. 1 makoto makoto 260  1月  4 19:02 patch02 (コピーしてきたパッチファイル)
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ patch -p1 hello.h < patch01 (パッチ適用)
  
  コマンドの実行結果
  --------------------------------------------------
  patching file hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ patch -p1 hello.c < patch02 (パッチ適用)
  
  コマンドの実行結果
  --------------------------------------------------
  patching file hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ cat hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  void Hello2(void) { printf("Hello2\n"); }  // 関数実装
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[05]
  コンパイルとインストール
  
[内容]
  ## 作業内容
    サンプル(GNU-Hello)のソース取得・Makefile作成・コンパイル・インストール・実行までを行う
  
  ## 使用マシン
    HOST : vm12
    IPV4 : 192.168.122.12
    MEMO : 仮想マシン(サーバー用途)
  
[確認]
  vm12$ cd $HOME
  vm12$ wget --no-check-certificate https://ftp.gnu.org/gnu/hello/hello-2.10.tar.gz (ソース取得)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 相手の証明書が期限切れだったのでリスクはあるが…証明書チェックをせずに続行した
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar zxf hello-2.10.tar.gz (ソースの解凍・展開)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ ls
  
  コマンドの実行結果
  --------------------------------------------------
  ABOUT-NLS      GNUmakefile    README         aclocal.m4     contrib        maint.mk
  AUTHORS        INSTALL        README-dev     build-aux      doc            man
  COPYING        Makefile.am    README-release config.in      hello.1        po
  ChangeLog      Makefile.in    THANKS         configure      lib            src
  ChangeLog.O    NEWS           TODO           configure.ac   m4             tests
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ cat README
  
  コマンドの実行結果
  --------------------------------------------------
  -- 省略 --

  // コンパイルとインストールはファイル(INSTALL*)を参照
  See the files ./INSTALL* for building and installation instructions.
  
  -- 省略 --
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ cat INSTALL
  
  コマンドの実行結果
  --------------------------------------------------
  -- 省略 --
  
  // コンパイルとインストールの手順
  Briefly, the shell command `./configure && make && make install'
  should configure, build, and install this package.

  -- 省略 --
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ ./configure (Makefile作成)
  
  コマンドの実行結果
  --------------------------------------------------
  checking for a BSD-compatible install... /bin/install -c
  checking whether build environment is sane... yes
  checking for a thread-safe mkdir -p... /bin/mkdir -p
  checking for gawk... gawk
  checking whether make sets $(MAKE)... yes
  checking whether make supports nested variables... yes
  checking for gcc... gcc
  checking whether the C compiler works... yes
  checking for C compiler default output file name... a.out
  checking for suffix of executables... 
  
  -- 省略 --
  
  checking where the gettext function comes from... libc
  checking that generated files are newer than configure... done
  configure: creating ./config.status
  config.status: creating Makefile (Makefile作成)
  config.status: creating po/Makefile.in
  config.status: creating config.h
  config.status: executing depfiles commands
  config.status: executing po-directories commands
  config.status: creating po/POTFILES
  config.status: creating po/Makefile
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ grep -E '^clean:' (ターゲット検索)
  
  コマンドの実行結果
  --------------------------------------------------
  clean: clean-recursive
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ grep -E '^uninstall:' (ターゲット検索)
  
  コマンドの実行結果
  --------------------------------------------------
  uninstall: uninstall-recursive
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ make (コンパイル)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 実行ファイル「hello」が生成された
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ sudo make install (インストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> root権限が必要な場所に書き込む場合もあるので「sudo」使用
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ which hello
  
  コマンドの実行結果
  --------------------------------------------------
  /usr/local/bin/hello -> ディレクトリ「/usr/local/bin」配下はパスが通るためプロンプトに「hello」と入力して実行可能
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ hello (実行)
  
  コマンドの実行結果
  --------------------------------------------------
  世界よ、こんにちは！ -> 日本語出力に改良された模様
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ make clean (コンパイル時に生成された不要ファイル削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ sudo make uninstall (アンインストール)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略)
  --------------------------------------------------
  
  vm12$ cd $HOME/hello-2.10
  vm12$ which hello
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> hello が見つからないとエラー出力
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[06]
  ローカルでのバックアップ - 01 (tar)
  
[内容]
  ## 作業内容
    バックアップをコマンド(tar)で行う
  
  ## 使用マシン
    HOST : vm12
    IPV4 : 192.168.122.12
    MEMO : 仮想マシン(サーバー用途)
  
  ## コマンド(tar)
    tar -c  // アーカイブ作成
    tar -x  // アーカイブ展開
    tar -t  // アーカイブ内のファイル表示
    tar -f  // アーカイブ指定
    tar -z  // gzipによる圧縮と解凍
    tar -j  // bzip2による圧縮と解凍
    tar -J  // xzによる圧縮と解凍
    tar -v  // 詳細情報を表示
    tar -p  // パーミッション保持
    tar -u  // アーカイブ内のファイルより新しいファイルのみアーカイブに追加
    tar -r  // ファイルをアーカイブに追加
    tar -C  // 処理開始前に指定ディレクトリに移動
    tar -N  // 指定日付より新しいファイルのみ対象
    tar -M  // 複数デバイスへ分割
    tar -P  // パス先頭の「/」を削除しない
    tar -W  // アーカイブ書込後に照合
    tar --delete  // アーカイブからファイル削除
  
[確認]
  vm12$ cd $HOME/HELLO -> 先にディレクトリ作成
  vm12$ vi hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  void Hello2(void) { printf("Hello2\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -C HELLO -cvf ARC.tar hello.c (ディレクトリ移動、アーカイブ作成)
  
  コマンドの実行結果
  --------------------------------------------------
  hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -tvf ARC.tar (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r-- makoto/makoto   157 2022-01-04 19:03 hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -C HELLO -rvf ARC.tar hello.h (アーカイブにファイル追加)
  
  コマンドの実行結果
  --------------------------------------------------
  hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -tvf ARC.tar (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r-- makoto/makoto   157 2022-01-04 19:03 hello.c
  -rw-rw-r-- makoto/makoto   134 2022-01-04 19:03 hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar --delete hello.h -vf ARC.tar (アーカイブからファイル削除)
  
  コマンドの実行結果
  --------------------------------------------------
  (省略) -> 出力なし
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -tvf ARC.tar (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r-- makoto/makoto   157 2022-01-04 19:03 hello.c
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -rvf ARC.tar HELLO/hello.h (アーカイブにファイル追加)
  
  コマンドの実行結果
  --------------------------------------------------
  HELLO/hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -tvf ARC.tar (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r-- makoto/makoto   157 2022-01-04 19:03 hello.c
  -rw-rw-r-- makoto/makoto   134 2022-01-04 19:03 HELLO/hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ tar -xvf ARC.tar HELLO/hello.h (アーカイブからファイル抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  HELLO/hello.h
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[07]
  ローカルでのバックアップ - 02 (cpio)
  
[内容]
  ## 作業内容
    バックアップをコマンド(cpio)で行う
  
  ## 使用マシン
    HOST : vm12
    IPV4 : 192.168.122.12
    MEMO : 仮想マシン(サーバー用途)
  
  ## コマンド(cpio)
    cpio -o  // アーカイブを作成
    cpio -i  // アーカイブからファイル抽出
    cpio -d  // 必要ならばディレクトリ作成
    ls * | cpio -o -F XX     // アーカイブ(XX)を作成
    ls * | cpio -o -F XX -A  // アーカイブ(XX)を作成、ファイル追加
    cat XX | cpio -i         // アーカイブ(XX)からファイル抽出
    cat XX | cpio -i -t      // アーカイブ(XX)からファイル抽出、コピーせず入力内容を一覧表示
    cat XX | cpio -i -v      // アーカイブ(XX)からファイル抽出、ファイル名を一覧表示
  
[確認]
  vm12$ cd $HOME/HELLO -> 先にディレクトリ作成
  vm12$ vi hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  void Hello2(void) { printf("Hello2\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ ls HELLO/hello.c | cpio -o -F CPO (アーカイブ作成)
  
  コマンドの実行結果
  --------------------------------------------------
  1 block
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat CPO | cpio -i -t (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  HELLO/hello.c
  1 block
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ ls HELLO/hello.h | cpio -o -F CPO -A (アーカイブにファイル追加)
  
  コマンドの実行結果
  --------------------------------------------------
  1 block
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat CPO | cpio -i -t (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  HELLO/hello.c
  HELLO/hello.h
  1 block
  --------------------------------------------------
  
  vm12$ cd $HOME -> 先に「$HOME/HELLO」のディレクトリ削除
  vm12$ cat CPO | cpio -i -d (アーカイブからファイル抽出)
  
  コマンドの実行結果
  --------------------------------------------------
  1 block
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ ls -lh HELLO/
  
  コマンドの実行結果
  --------------------------------------------------
  -rw-rw-r--. 1 makoto makoto 157  1月  5 12:21 hello.c
  -rw-rw-r--. 1 makoto makoto 134  1月  5 12:21 hello.h
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ cat CPO | cpio -i -t (アーカイブ内のファイル確認)
  
  コマンドの実行結果
  --------------------------------------------------
  HELLO/hello.c
  HELLO/hello.h
  1 block
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
[08]
  ローカルでのバックアップ - 03 (dd)
  
[内容]
  ## 作業内容
    バックアップをコマンド(dd)で行う
  
  ## 使用マシン
    HOST : vm12
    IPV4 : 192.168.122.12
    MEMO : 仮想マシン(サーバー用途)
  
  ## コマンド(dd)
    dd if=XX  // 入力側ファイル(XX : デフォルトは標準入力)
    dd of=XX  // 出力側ファイル(XX : デフォルトは標準出力)
    dd bs=XX  // 入出力ブロックサイズ(XX)
    dd count=XX  // 回数(XX)分のブロックをコピー
  
[確認]
  vm12$ cd $HOME/HELLO -> 先にディレクトリ作成
  vm12$ vi hello.h
  
  コマンドの実行結果
  --------------------------------------------------
  #ifndef HELLO_H_
  
  void Hello1(void);  // 関数プロトタイプ宣言
  void Hello2(void);  // 関数プロトタイプ宣言
  
  #endif
  --------------------------------------------------
  
  vm12$ cd $HOME/HELLO
  vm12$ vi hello.c
  
  コマンドの実行結果
  --------------------------------------------------
  #include <stdio.h>
  #include "hello.h"
  
  void Hello1(void) { printf("Hello1\n"); }  // 関数実装
  void Hello2(void) { printf("Hello2\n"); }  // 関数実装
  --------------------------------------------------
  
  vm12$ cd $HOME
  vm12$ dd if=HELLO/hello.c of=DD1 (ファイル単位でコピー)
  
  コマンドの実行結果
  --------------------------------------------------
  0+1 レコード入力
  0+1 レコード出力
  157 バイト (157 B) コピーされました、 0.00806405 秒、 19.5 kB/秒
  --------------------------------------------------
  
  以下の確認に続く
  
================================================================================
